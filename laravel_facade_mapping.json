{"App":{"root":"Illuminate\\Foundation\\Application","facade":"Illuminate\\Support\\Facades\\App","methods":{"Illuminate\\Foundation\\Application":{"setRequestForConsoleEnvironment":{"name":"setRequestForConsoleEnvironment","params":"","desc":"Set the application request for the console environment."},"redirectIfTrailingSlash":{"name":"redirectIfTrailingSlash","params":"","desc":"Redirect the request if it has a trailing slash."},"bindInstallPaths":{"name":"bindInstallPaths","params":"$paths","desc":"Bind the installation paths to the application."},"getBootstrapFile":{"name":"getBootstrapFile","params":"","desc":"Get the application bootstrap file."},"startExceptionHandling":{"name":"startExceptionHandling","params":"","desc":"Start the exception handling for the request."},"environment":{"name":"environment","params":"","desc":"Get or check the current application environment."},"detectEnvironment":{"name":"detectEnvironment","params":"$environments","desc":"Detect the application's current environment."},"runningInConsole":{"name":"runningInConsole","params":"","desc":"Determine if we are running in the console."},"runningUnitTests":{"name":"runningUnitTests","params":"","desc":"Determine if we are running unit tests."},"register":{"name":"register","params":"$provider, $options = array()","desc":"Register a service provider with the application."},"loadDeferredProviders":{"name":"loadDeferredProviders","params":"","desc":"Load and boot all of the remaining deferred providers."},"make":{"name":"make","params":"$abstract, $parameters = array()","desc":"Resolve the given type from the container."},"before":{"name":"before","params":"$callback","desc":"Register a \"before\" application filter."},"after":{"name":"after","params":"$callback","desc":"Register an \"after\" application filter."},"close":{"name":"close","params":"$callback","desc":"Register a \"close\" application filter."},"finish":{"name":"finish","params":"$callback","desc":"Register a \"finish\" application filter."},"shutdown":{"name":"shutdown","params":"$callback = null","desc":"Register a \"shutdown\" callback."},"run":{"name":"run","params":"","desc":"Handles the given request and delivers the response."},"dispatch":{"name":"dispatch","params":"$request","desc":"Handle the given request and get the response."},"handle":{"name":"handle","params":"$request, $type = 1, $catch = true","desc":"Handle the given request and get the response."},"boot":{"name":"boot","params":"","desc":"Boot the application's service providers."},"booting":{"name":"booting","params":"$callback","desc":"Register a new boot listener."},"booted":{"name":"booted","params":"$callback","desc":"Register a new \"booted\" listener."},"prepareRequest":{"name":"prepareRequest","params":"$request","desc":"Prepare the request by injecting any services."},"prepareResponse":{"name":"prepareResponse","params":"$value","desc":"Prepare the given value as a Response object."},"isDownForMaintenance":{"name":"isDownForMaintenance","params":"","desc":"Determine if the application is currently down for maintenance."},"down":{"name":"down","params":"$callback","desc":"Register a maintenance mode event listener."},"abort":{"name":"abort","params":"$code, $message = '', $headers = array()","desc":"Throw an HttpException with the given data."},"missing":{"name":"missing","params":"$callback","desc":"Register a 404 error handler."},"error":{"name":"error","params":"$callback","desc":"Register an application error handler."},"pushError":{"name":"pushError","params":"$callback","desc":"Register an error handler at the bottom of the stack."},"fatal":{"name":"fatal","params":"$callback","desc":"Register an error handler for fatal errors."},"getConfigLoader":{"name":"getConfigLoader","params":"","desc":"Get the configuration loader instance."},"getProviderRepository":{"name":"getProviderRepository","params":"","desc":"Get the service provider repository instance."},"getLocale":{"name":"getLocale","params":"","desc":"Get the current application locale."},"setLocale":{"name":"setLocale","params":"$locale","desc":"Set the current application locale."},"getLoadedProviders":{"name":"getLoadedProviders","params":"","desc":"Get the service providers that have been loaded."},"setDeferredServices":{"name":"setDeferredServices","params":"$services","desc":"Set the application's deferred services."},"requestClass":{"name":"requestClass","params":"$class = null","desc":"Get or set the request class for the application."},"onRequest":{"name":"onRequest","params":"$method, $parameters = array()","desc":"Call a method on the default request class."}},"Illuminate\\Container\\Container":{"bound":{"name":"bound","params":"$abstract","desc":"Determine if the given abstract type has been bound."},"bind":{"name":"bind","params":"$abstract, $concrete = null, $shared = false","desc":"Register a binding with the container."},"bindIf":{"name":"bindIf","params":"$abstract, $concrete = null, $shared = false","desc":"Register a binding if it hasn't already been registered."},"singleton":{"name":"singleton","params":"$abstract, $concrete = null","desc":"Register a shared binding in the container."},"share":{"name":"share","params":"$closure","desc":"Wrap a Closure such that it is shared."},"extend":{"name":"extend","params":"$abstract, $closure","desc":"\"Extend\" an abstract type in the container."},"instance":{"name":"instance","params":"$abstract, $instance","desc":"Register an existing instance as shared in the container."},"alias":{"name":"alias","params":"$abstract, $alias","desc":"Alias a type to a shorter name."},"build":{"name":"build","params":"$concrete, $parameters = array()","desc":"Instantiate a concrete instance of the given type."},"resolving":{"name":"resolving","params":"$callback","desc":"Register a new resolving callback."},"getBindings":{"name":"getBindings","params":"","desc":"Get the container's bindings."},"offsetExists":{"name":"offsetExists","params":"$key","desc":"Determine if a given offset exists."},"offsetGet":{"name":"offsetGet","params":"$key","desc":"Get the value at a given offset."},"offsetSet":{"name":"offsetSet","params":"$key, $value","desc":"Set the value at a given offset."},"offsetUnset":{"name":"offsetUnset","params":"$key","desc":"Unset the value at a given offset."}}}},"Artisan":{"root":"Illuminate\\Console\\Application","facade":"Illuminate\\Support\\Facades\\Artisan","methods":{"Illuminate\\Console\\Application":{"start":{"name":"start","params":"$app","desc":"Start a new Console application."},"add":{"name":"add","params":"$command","desc":"Add a command to the console."},"resolve":{"name":"resolve","params":"$command","desc":"Add a command, resolving through the application."},"resolveCommands":{"name":"resolveCommands","params":"$commands","desc":"Resolve an array of commands through the application."},"renderException":{"name":"renderException","params":"$e, $output","desc":"Render the given exception."},"setExceptionHandler":{"name":"setExceptionHandler","params":"$handler","desc":"Set the exception handler instance."},"setLaravel":{"name":"setLaravel","params":"$laravel","desc":"Set the Laravel application instance."}},"Symfony\\Component\\Console\\Application":{"setDispatcher":{"name":"setDispatcher","params":"$dispatcher","desc":""},"run":{"name":"run","params":"$input = null, $output = null","desc":"Runs the current application."},"doRun":{"name":"doRun","params":"$input, $output","desc":"Runs the current application."},"setHelperSet":{"name":"setHelperSet","params":"$helperSet","desc":"Set a helper set to be used with the command."},"getHelperSet":{"name":"getHelperSet","params":"","desc":"Get the helper set associated with the command."},"setDefinition":{"name":"setDefinition","params":"$definition","desc":"Set an input definition set to be used with this application"},"getDefinition":{"name":"getDefinition","params":"","desc":"Gets the InputDefinition related to this Application."},"getHelp":{"name":"getHelp","params":"","desc":"Gets the help message."},"setCatchExceptions":{"name":"setCatchExceptions","params":"$boolean","desc":"Sets whether to catch exceptions or not during commands execution."},"setAutoExit":{"name":"setAutoExit","params":"$boolean","desc":"Sets whether to automatically exit after a command execution or not."},"getName":{"name":"getName","params":"","desc":"Gets the name of the application."},"setName":{"name":"setName","params":"$name","desc":"Sets the application name."},"getVersion":{"name":"getVersion","params":"","desc":"Gets the application version."},"setVersion":{"name":"setVersion","params":"$version","desc":"Sets the application version."},"getLongVersion":{"name":"getLongVersion","params":"","desc":"Returns the long version of the application."},"register":{"name":"register","params":"$name","desc":"Registers a new command."},"addCommands":{"name":"addCommands","params":"$commands","desc":"Adds an array of command objects."},"get":{"name":"get","params":"$name","desc":"Returns a registered command by name or alias."},"has":{"name":"has","params":"$name","desc":"Returns true if the command exists, false otherwise."},"getNamespaces":{"name":"getNamespaces","params":"","desc":"Returns an array of all unique namespaces used by currently registered commands."},"findNamespace":{"name":"findNamespace","params":"$namespace","desc":"Finds a registered namespace by a name or an abbreviation."},"find":{"name":"find","params":"$name","desc":"Finds a command by name or alias."},"all":{"name":"all","params":"$namespace = null","desc":"Gets the commands (registered in the given namespace if provided)."},"getAbbreviations":{"name":"getAbbreviations","params":"$names","desc":"Returns an array of possible abbreviations given a set of names."},"asText":{"name":"asText","params":"$namespace = null, $raw = false","desc":"Returns a text representation of the Application."},"asXml":{"name":"asXml","params":"$namespace = null, $asDom = false","desc":"Returns an XML representation of the Application."},"getTerminalDimensions":{"name":"getTerminalDimensions","params":"","desc":"Tries to figure out the terminal dimensions based on the current environment"},"extractNamespace":{"name":"extractNamespace","params":"$name, $limit = null","desc":"Returns the namespace part of the command name."}}}},"Auth":{"root":"Illuminate\\Auth\\AuthManager","facade":"Illuminate\\Support\\Facades\\Auth","methods":{"Illuminate\\Auth\\AuthManager":{"createDatabaseDriver":{"name":"createDatabaseDriver","params":"","desc":"Create an instance of the database driver."},"createEloquentDriver":{"name":"createEloquentDriver","params":"","desc":"Create an instance of the Eloquent driver."}},"Illuminate\\Support\\Manager":{"driver":{"name":"driver","params":"$driver = null","desc":"Get a driver instance."},"extend":{"name":"extend","params":"$driver, $callback","desc":"Register a custom driver creator Closure."},"getDrivers":{"name":"getDrivers","params":"","desc":"Get all of the created \"drivers\"."}},"Illuminate\\Auth\\Guard":{"check":{"name":"check","params":"","desc":"Determine if the current user is authenticated."},"guest":{"name":"guest","params":"","desc":"Determine if the current user is a guest."},"user":{"name":"user","params":"","desc":"Get the currently authenticated user."},"once":{"name":"once","params":"$credentials = array()","desc":"Log a user into the application without sessions or cookies."},"validate":{"name":"validate","params":"$credentials = array()","desc":"Validate a user's credentials."},"basic":{"name":"basic","params":"$field = 'email', $request = null","desc":"Attempt to authenticate using HTTP Basic Auth."},"onceBasic":{"name":"onceBasic","params":"$field = 'email', $request = null","desc":"Perform a stateless HTTP Basic login attempt."},"attempt":{"name":"attempt","params":"$credentials = array(), $remember = false, $login = true","desc":"Attempt to authenticate a user using the given credentials."},"attempting":{"name":"attempting","params":"$callback","desc":"Register an authentication attempt event listener."},"login":{"name":"login","params":"$user, $remember = false","desc":"Log a user into the application."},"loginUsingId":{"name":"loginUsingId","params":"$id, $remember = false","desc":"Log the given user ID into the application."},"onceUsingId":{"name":"onceUsingId","params":"$id","desc":"Log the given user ID into the application without sessions or cookies."},"logout":{"name":"logout","params":"","desc":"Log the user out of the application."},"getCookieJar":{"name":"getCookieJar","params":"","desc":"Get the cookie creator instance used by the guard."},"setCookieJar":{"name":"setCookieJar","params":"$cookie","desc":"Set the cookie creator instance used by the guard."},"getDispatcher":{"name":"getDispatcher","params":"","desc":"Get the event dispatcher instance."},"setDispatcher":{"name":"setDispatcher","params":"$events","desc":"Set the event dispatcher instance."},"getSession":{"name":"getSession","params":"","desc":"Get the session store used by the guard."},"getProvider":{"name":"getProvider","params":"","desc":"Get the user provider used by the guard."},"setProvider":{"name":"setProvider","params":"$provider","desc":"Set the user provider used by the guard."},"getUser":{"name":"getUser","params":"","desc":"Return the currently cached user of the application."},"setUser":{"name":"setUser","params":"$user","desc":"Set the current user of the application."},"getRequest":{"name":"getRequest","params":"","desc":"Get the current request instance."},"setRequest":{"name":"setRequest","params":"$request","desc":"Set the current request instance."},"getName":{"name":"getName","params":"","desc":"Get a unique identifier for the auth session value."},"getRecallerName":{"name":"getRecallerName","params":"","desc":"Get the name of the cookie used to store the \"recaller\"."}}}},"Blade":{"root":"Illuminate\\View\\Compilers\\BladeCompiler","facade":"Illuminate\\Support\\Facades\\Blade","methods":{"Illuminate\\View\\Compilers\\BladeCompiler":{"compile":{"name":"compile","params":"$path","desc":"Compile the view at the given path."},"compileString":{"name":"compileString","params":"$value","desc":"Compile the given Blade template contents."},"extend":{"name":"extend","params":"$compiler","desc":"Register a custom Blade compiler."},"createMatcher":{"name":"createMatcher","params":"$function","desc":"Get the regular expression for a generic Blade function."},"createOpenMatcher":{"name":"createOpenMatcher","params":"$function","desc":"Get the regular expression for a generic Blade function."},"createPlainMatcher":{"name":"createPlainMatcher","params":"$function","desc":"Create a plain Blade matcher."},"setContentTags":{"name":"setContentTags","params":"$openTag, $closeTag, $escaped = false","desc":"Sets the content tags used for the compiler."},"setEscapedContentTags":{"name":"setEscapedContentTags","params":"$openTag, $closeTag","desc":"Sets the escaped content tags used for the compiler."}},"Illuminate\\View\\Compilers\\Compiler":{"getCompiledPath":{"name":"getCompiledPath","params":"$path","desc":"Get the path to the compiled version of a view."},"isExpired":{"name":"isExpired","params":"$path","desc":"Determine if the view at the given path is expired."}}}},"Cache":{"root":"Illuminate\\Cache\\CacheManager","facade":"Illuminate\\Support\\Facades\\Cache","methods":{"Illuminate\\Cache\\CacheManager":{"getPrefix":{"name":"getPrefix","params":"","desc":"Get the cache \"prefix\" value."}},"Illuminate\\Support\\Manager":{"driver":{"name":"driver","params":"$driver = null","desc":"Get a driver instance."},"extend":{"name":"extend","params":"$driver, $callback","desc":"Register a custom driver creator Closure."},"getDrivers":{"name":"getDrivers","params":"","desc":"Get all of the created \"drivers\"."}},"Illuminate\\Cache\\Repository":{"has":{"name":"has","params":"$key","desc":"Determine if an item exists in the cache."},"get":{"name":"get","params":"$key, $default = null","desc":"Retrieve an item from the cache by key."},"add":{"name":"add","params":"$key, $value, $minutes","desc":"Store an item in the cache if the key does not exist."},"remember":{"name":"remember","params":"$key, $minutes, $callback","desc":"Get an item from the cache, or store the default value."},"sear":{"name":"sear","params":"$key, $callback","desc":"Get an item from the cache, or store the default value forever."},"rememberForever":{"name":"rememberForever","params":"$key, $callback","desc":"Get an item from the cache, or store the default value forever."},"getDefaultCacheTime":{"name":"getDefaultCacheTime","params":"","desc":"Get the default cache time."},"setDefaultCacheTime":{"name":"setDefaultCacheTime","params":"$minutes","desc":"Set the default cache time in minutes."},"getStore":{"name":"getStore","params":"","desc":"Get the cache store implementation."},"offsetExists":{"name":"offsetExists","params":"$key","desc":"Determine if a cached value exists."},"offsetGet":{"name":"offsetGet","params":"$key","desc":"Retrieve an item from the cache by key."},"offsetSet":{"name":"offsetSet","params":"$key, $value","desc":"Store an item in the cache for the default time."},"offsetUnset":{"name":"offsetUnset","params":"$key","desc":"Remove an item from the cache."}}}},"ClassLoader":{"root":"Illuminate\\Support\\ClassLoader","facade":"Illuminate\\Support\\ClassLoader","methods":{"Illuminate\\Support\\ClassLoader":{"load":{"name":"load","params":"$class","desc":"Load the given class file."},"normalizeClass":{"name":"normalizeClass","params":"$class","desc":"Get the normal file name for a class."},"register":{"name":"register","params":"","desc":"Register the given class loader on the auto-loader stack."},"addDirectories":{"name":"addDirectories","params":"$directories","desc":"Add directories to the class loader."},"removeDirectories":{"name":"removeDirectories","params":"$directories = null","desc":"Remove directories from the class loader."},"getDirectories":{"name":"getDirectories","params":"","desc":"Gets all the directories registered with the loader."}}}},"Config":{"root":"Illuminate\\Config\\Repository","facade":"Illuminate\\Support\\Facades\\Config","methods":{"Illuminate\\Config\\Repository":{"has":{"name":"has","params":"$key","desc":"Determine if the given configuration value exists."},"hasGroup":{"name":"hasGroup","params":"$key","desc":"Determine if a configuration group exists."},"get":{"name":"get","params":"$key, $default = null","desc":"Get the specified configuration value."},"set":{"name":"set","params":"$key, $value","desc":"Set a given configuration value."},"package":{"name":"package","params":"$package, $hint, $namespace = null","desc":"Register a package for cascading configuration."},"afterLoading":{"name":"afterLoading","params":"$namespace, $callback","desc":"Register an after load callback for a given namespace."},"addNamespace":{"name":"addNamespace","params":"$namespace, $hint","desc":"Add a new namespace to the loader."},"getNamespaces":{"name":"getNamespaces","params":"","desc":"Returns all registered namespaces with the config\nloader."},"getLoader":{"name":"getLoader","params":"","desc":"Get the loader implementation."},"setLoader":{"name":"setLoader","params":"$loader","desc":"Set the loader implementation."},"getEnvironment":{"name":"getEnvironment","params":"","desc":"Get the current configuration environment."},"getAfterLoadCallbacks":{"name":"getAfterLoadCallbacks","params":"","desc":"Get the after load callback array."},"getItems":{"name":"getItems","params":"","desc":"Get all of the configuration items."},"offsetExists":{"name":"offsetExists","params":"$key","desc":"Determine if the given configuration option exists."},"offsetGet":{"name":"offsetGet","params":"$key","desc":"Get a configuration option."},"offsetSet":{"name":"offsetSet","params":"$key, $value","desc":"Set a configuration option."},"offsetUnset":{"name":"offsetUnset","params":"$key","desc":"Unset a configuration option."}},"Illuminate\\Support\\NamespacedItemResolver":{"parseKey":{"name":"parseKey","params":"$key","desc":"Parse a key into namespace, group, and item."},"setParsedKey":{"name":"setParsedKey","params":"$key, $parsed","desc":"Set the parsed value of a key."}}}},"Controller":{"root":"Illuminate\\Routing\\Controllers\\Controller","facade":"Illuminate\\Routing\\Controllers\\Controller","methods":{"Illuminate\\Routing\\Controllers\\Controller":{"beforeFilter":{"name":"beforeFilter","params":"$filter, $options = array()","desc":"Register a new \"before\" filter on the controller."},"afterFilter":{"name":"afterFilter","params":"$filter, $options = array()","desc":"Register a new \"after\" filter on the controller."},"callAction":{"name":"callAction","params":"$container, $router, $method, $parameters","desc":"Execute an action on the controller."},"getControllerFilters":{"name":"getControllerFilters","params":"","desc":"Get the code registered filters."},"missingMethod":{"name":"missingMethod","params":"$parameters","desc":"Handle calls to missing methods on the controller."}}}},"Cookie":{"root":"Illuminate\\Cookie\\CookieJar","facade":"Illuminate\\Support\\Facades\\Cookie","methods":{"Illuminate\\Cookie\\CookieJar":{"has":{"name":"has","params":"$key","desc":"Determine if a cookie exists and is not null."},"get":{"name":"get","params":"$key, $default = null","desc":"Get the value of the given cookie."},"make":{"name":"make","params":"$name, $value, $minutes = 0, $path = null, $domain = null, $secure = false, $httpOnly = true","desc":"Create a new cookie instance."},"forever":{"name":"forever","params":"$name, $value, $path = null, $domain = null, $secure = false, $httpOnly = true","desc":"Create a cookie that lasts \"forever\" (five years)."},"forget":{"name":"forget","params":"$name","desc":"Expire the given cookie."},"setDefaultPathAndDomain":{"name":"setDefaultPathAndDomain","params":"$path, $domain","desc":"Set the default path and domain for the jar."},"getRequest":{"name":"getRequest","params":"","desc":"Get the request instance."},"getEncrypter":{"name":"getEncrypter","params":"","desc":"Get the encrypter instance."},"queue":{"name":"queue","params":"","desc":"Queue a cookie to send with the next response."},"unqueue":{"name":"unqueue","params":"$name","desc":"Remove a cookie from the queue."},"getQueuedCookies":{"name":"getQueuedCookies","params":"","desc":"Get the cookies which have been queued for the next request"}}}},"Crypt":{"root":"Illuminate\\Encryption\\Encrypter","facade":"Illuminate\\Support\\Facades\\Crypt","methods":{"Illuminate\\Encryption\\Encrypter":{"encrypt":{"name":"encrypt","params":"$value","desc":"Encrypt the given value."},"decrypt":{"name":"decrypt","params":"$payload","desc":"Decrypt the given value."},"setKey":{"name":"setKey","params":"$key","desc":"Set the encryption key."},"setCipher":{"name":"setCipher","params":"$cipher","desc":"Set the encryption cipher."},"setMode":{"name":"setMode","params":"$mode","desc":"Set the encryption mode."}}}},"DB":{"root":"Illuminate\\Database\\DatabaseManager","facade":"Illuminate\\Support\\Facades\\DB","methods":{"Illuminate\\Database\\DatabaseManager":{"connection":{"name":"connection","params":"$name = null","desc":"Get a database connection instance."},"reconnect":{"name":"reconnect","params":"$name = null","desc":"Reconnect to the given database."},"disconnect":{"name":"disconnect","params":"$name = null","desc":"Disconnect from the given database."},"getDefaultConnection":{"name":"getDefaultConnection","params":"","desc":"Get the default connection name."},"setDefaultConnection":{"name":"setDefaultConnection","params":"$name","desc":"Set the default connection name."},"extend":{"name":"extend","params":"$name, $resolver","desc":"Register an extension connection resolver."},"getConnections":{"name":"getConnections","params":"","desc":"Return all of the created connections."}},"Illuminate\\Database\\Connection":{"useDefaultQueryGrammar":{"name":"useDefaultQueryGrammar","params":"","desc":"Set the query grammar to the default implementation."},"useDefaultSchemaGrammar":{"name":"useDefaultSchemaGrammar","params":"","desc":"Set the schema grammar to the default implementation."},"useDefaultPostProcessor":{"name":"useDefaultPostProcessor","params":"","desc":"Set the query post processor to the default implementation."},"getSchemaBuilder":{"name":"getSchemaBuilder","params":"","desc":"Get a schema builder instance for the connection."},"table":{"name":"table","params":"$table","desc":"Begin a fluent query against a database table."},"raw":{"name":"raw","params":"$value","desc":"Get a new raw query expression."},"selectOne":{"name":"selectOne","params":"$query, $bindings = array()","desc":"Run a select statement and return a single result."},"select":{"name":"select","params":"$query, $bindings = array()","desc":"Run a select statement against the database."},"insert":{"name":"insert","params":"$query, $bindings = array()","desc":"Run an insert statement against the database."},"update":{"name":"update","params":"$query, $bindings = array()","desc":"Run an update statement against the database."},"delete":{"name":"delete","params":"$query, $bindings = array()","desc":"Run a delete statement against the database."},"statement":{"name":"statement","params":"$query, $bindings = array()","desc":"Execute an SQL statement and return the boolean result."},"affectingStatement":{"name":"affectingStatement","params":"$query, $bindings = array()","desc":"Run an SQL statement and get the number of rows affected."},"unprepared":{"name":"unprepared","params":"$query","desc":"Run a raw, unprepared query against the PDO connection."},"prepareBindings":{"name":"prepareBindings","params":"$bindings","desc":"Prepare the query bindings for execution."},"transaction":{"name":"transaction","params":"$callback","desc":"Execute a Closure within a transaction."},"beginTransaction":{"name":"beginTransaction","params":"","desc":"Start a new database transaction."},"commit":{"name":"commit","params":"","desc":"Commit the active database transaction."},"rollBack":{"name":"rollBack","params":"","desc":"Rollback the active database transaction."},"pretend":{"name":"pretend","params":"$callback","desc":"Execute the given callback in \"dry run\" mode."},"logQuery":{"name":"logQuery","params":"$query, $bindings, $time = null","desc":"Log a query in the connection's query log."},"listen":{"name":"listen","params":"$callback","desc":"Register a database query listener with the connection."},"getDoctrineColumn":{"name":"getDoctrineColumn","params":"$table, $column","desc":"Get a Doctrine Schema Column instance."},"getDoctrineSchemaManager":{"name":"getDoctrineSchemaManager","params":"","desc":"Get the Doctrine DBAL schema manager for the connection."},"getDoctrineConnection":{"name":"getDoctrineConnection","params":"","desc":"Get the Doctrine DBAL database connection instance."},"getPdo":{"name":"getPdo","params":"","desc":"Get the currently used PDO connection."},"getName":{"name":"getName","params":"","desc":"Get the database connection name."},"getConfig":{"name":"getConfig","params":"$option","desc":"Get an option from the configuration options."},"getDriverName":{"name":"getDriverName","params":"","desc":"Get the PDO driver name."},"getQueryGrammar":{"name":"getQueryGrammar","params":"","desc":"Get the query grammar used by the connection."},"setQueryGrammar":{"name":"setQueryGrammar","params":"$grammar","desc":"Set the query grammar used by the connection."},"getSchemaGrammar":{"name":"getSchemaGrammar","params":"","desc":"Get the schema grammar used by the connection."},"setSchemaGrammar":{"name":"setSchemaGrammar","params":"$grammar","desc":"Set the schema grammar used by the connection."},"getPostProcessor":{"name":"getPostProcessor","params":"","desc":"Get the query post processor used by the connection."},"setPostProcessor":{"name":"setPostProcessor","params":"$processor","desc":"Set the query post processor used by the connection."},"getEventDispatcher":{"name":"getEventDispatcher","params":"","desc":"Get the event dispatcher used by the connection."},"setEventDispatcher":{"name":"setEventDispatcher","params":"$events","desc":"Set the event dispatcher instance on the connection."},"getPaginator":{"name":"getPaginator","params":"","desc":"Get the paginator environment instance."},"setPaginator":{"name":"setPaginator","params":"$paginator","desc":"Set the pagination environment instance."},"getCacheManager":{"name":"getCacheManager","params":"","desc":"Get the cache manager instance."},"setCacheManager":{"name":"setCacheManager","params":"$cache","desc":"Set the cache manager instance on the connection."},"pretending":{"name":"pretending","params":"","desc":"Determine if the connection in a \"dry run\"."},"getFetchMode":{"name":"getFetchMode","params":"","desc":"Get the default fetch mode for the connection."},"setFetchMode":{"name":"setFetchMode","params":"$fetchMode","desc":"Set the default fetch mode for the connection."},"getQueryLog":{"name":"getQueryLog","params":"","desc":"Get the connection query log."},"flushQueryLog":{"name":"flushQueryLog","params":"","desc":"Clear the query log."},"enableQueryLog":{"name":"enableQueryLog","params":"","desc":"Enable the query log on the connection."},"disableQueryLog":{"name":"disableQueryLog","params":"","desc":"Disable the query log on the connection."},"getDatabaseName":{"name":"getDatabaseName","params":"","desc":"Get the name of the connected database."},"setDatabaseName":{"name":"setDatabaseName","params":"$database","desc":"Set the name of the connected database."},"getTablePrefix":{"name":"getTablePrefix","params":"","desc":"Get the table prefix for the connection."},"setTablePrefix":{"name":"setTablePrefix","params":"$prefix","desc":"Set the table prefix in use by the connection."},"withTablePrefix":{"name":"withTablePrefix","params":"$grammar","desc":"Set the table prefix and return the grammar."}}}},"Eloquent":{"root":"Illuminate\\Database\\Eloquent\\Builder","facade":"Illuminate\\Database\\Eloquent\\Model","methods":{"Illuminate\\Database\\Eloquent\\Model":{"observe":{"name":"observe","params":"$class","desc":"Register an observer with the Model."},"fill":{"name":"fill","params":"$attributes","desc":"Fill the model with an array of attributes."},"newInstance":{"name":"newInstance","params":"$attributes = array(), $exists = false","desc":"Create a new instance of the given model."},"newFromBuilder":{"name":"newFromBuilder","params":"$attributes = array()","desc":"Create a new model instance that is existing."},"create":{"name":"create","params":"$attributes","desc":"Save a new model and return the instance."},"firstOrCreate":{"name":"firstOrCreate","params":"$attributes","desc":"Get the first record matching the attributes or create it."},"firstOrNew":{"name":"firstOrNew","params":"$attributes","desc":"Get the first record matching the attributes or instantiate it."},"query":{"name":"query","params":"","desc":"Begin querying the model."},"on":{"name":"on","params":"$connection = null","desc":"Begin querying the model on a given connection."},"all":{"name":"all","params":"$columns = array()","desc":"Get all of the models from the database."},"find":{"name":"find","params":"$id, $columns = array()","desc":"Find a model by its primary key."},"findOrFail":{"name":"findOrFail","params":"$id, $columns = array()","desc":"Find a model by its primary key or throw an exception."},"load":{"name":"load","params":"$relations","desc":"Eager load relations on the model."},"with":{"name":"with","params":"$relations","desc":"Being querying a model with eager loading."},"hasOne":{"name":"hasOne","params":"$related, $foreignKey = null","desc":"Define a one-to-one relationship."},"morphOne":{"name":"morphOne","params":"$related, $name, $type = null, $id = null","desc":"Define a polymorphic one-to-one relationship."},"belongsTo":{"name":"belongsTo","params":"$related, $foreignKey = null","desc":"Define an inverse one-to-one or many relationship."},"morphTo":{"name":"morphTo","params":"$name = null, $type = null, $id = null","desc":"Define an polymorphic, inverse one-to-one or many relationship."},"hasMany":{"name":"hasMany","params":"$related, $foreignKey = null","desc":"Define a one-to-many relationship."},"morphMany":{"name":"morphMany","params":"$related, $name, $type = null, $id = null","desc":"Define a polymorphic one-to-many relationship."},"belongsToMany":{"name":"belongsToMany","params":"$related, $table = null, $foreignKey = null, $otherKey = null","desc":"Define a many-to-many relationship."},"joiningTable":{"name":"joiningTable","params":"$related","desc":"Get the joining table name for a many-to-many relation."},"destroy":{"name":"destroy","params":"$ids","desc":"Destroy the models for the given IDs."},"delete":{"name":"delete","params":"","desc":"Delete the model from the database."},"forceDelete":{"name":"forceDelete","params":"","desc":"Force a hard delete on a soft deleted model."},"restore":{"name":"restore","params":"","desc":"Restore a soft-deleted model instance."},"saving":{"name":"saving","params":"$callback","desc":"Register a saving model event with the dispatcher."},"saved":{"name":"saved","params":"$callback","desc":"Register a saved model event with the dispatcher."},"updating":{"name":"updating","params":"$callback","desc":"Register an updating model event with the dispatcher."},"updated":{"name":"updated","params":"$callback","desc":"Register an updated model event with the dispatcher."},"creating":{"name":"creating","params":"$callback","desc":"Register a creating model event with the dispatcher."},"created":{"name":"created","params":"$callback","desc":"Register a created model event with the dispatcher."},"deleting":{"name":"deleting","params":"$callback","desc":"Register a deleting model event with the dispatcher."},"deleted":{"name":"deleted","params":"$callback","desc":"Register a deleted model event with the dispatcher."},"restoring":{"name":"restoring","params":"$callback","desc":"Register a restoring model event with the dispatcher."},"restored":{"name":"restored","params":"$callback","desc":"Register a restored model event with the dispatcher."},"flushEventListeners":{"name":"flushEventListeners","params":"","desc":"Remove all of the event listeners for the model."},"getObservableEvents":{"name":"getObservableEvents","params":"","desc":"Get the observable event names."},"update":{"name":"update","params":"$attributes = array()","desc":"Update the model in the database."},"push":{"name":"push","params":"","desc":"Save the model and all of its relationships."},"save":{"name":"save","params":"$options = array()","desc":"Save the model to the database."},"touchOwners":{"name":"touchOwners","params":"","desc":"Touch the owning relations of the model."},"touches":{"name":"touches","params":"$relation","desc":"Determine if the model touches a given relation."},"touch":{"name":"touch","params":"","desc":"Update the model's update timestamp."},"setCreatedAt":{"name":"setCreatedAt","params":"$value","desc":"Set the value of the \"created at\" attribute."},"setUpdatedAt":{"name":"setUpdatedAt","params":"$value","desc":"Set the value of the \"updated at\" attribute."},"getCreatedAtColumn":{"name":"getCreatedAtColumn","params":"","desc":"Get the name of the \"created at\" column."},"getUpdatedAtColumn":{"name":"getUpdatedAtColumn","params":"","desc":"Get the name of the \"updated at\" column."},"getDeletedAtColumn":{"name":"getDeletedAtColumn","params":"","desc":"Get the name of the \"deleted at\" column."},"getQualifiedDeletedAtColumn":{"name":"getQualifiedDeletedAtColumn","params":"","desc":"Get the fully qualified \"deleted at\" column."},"freshTimestamp":{"name":"freshTimestamp","params":"","desc":"Get a fresh timestamp for the model."},"freshTimestampString":{"name":"freshTimestampString","params":"","desc":"Get a fresh timestamp for the model."},"newQuery":{"name":"newQuery","params":"$excludeDeleted = true","desc":"Get a new query builder for the model's table."},"newQueryWithDeleted":{"name":"newQueryWithDeleted","params":"","desc":"Get a new query builder that includes soft deletes."},"trashed":{"name":"trashed","params":"","desc":"Determine if the model instance has been soft-deleted."},"withTrashed":{"name":"withTrashed","params":"","desc":"Get a new query builder that includes soft deletes."},"onlyTrashed":{"name":"onlyTrashed","params":"","desc":"Get a new query builder that only includes soft deletes."},"newCollection":{"name":"newCollection","params":"$models = array()","desc":"Create a new Eloquent Collection instance."},"newPivot":{"name":"newPivot","params":"$parent, $attributes, $table, $exists","desc":"Create a new pivot model instance."},"getTable":{"name":"getTable","params":"","desc":"Get the table associated with the model."},"setTable":{"name":"setTable","params":"$table","desc":"Set the table associated with the model."},"getKey":{"name":"getKey","params":"","desc":"Get the value of the model's primary key."},"getKeyName":{"name":"getKeyName","params":"","desc":"Get the primary key for the model."},"getQualifiedKeyName":{"name":"getQualifiedKeyName","params":"","desc":"Get the table qualified key name."},"usesTimestamps":{"name":"usesTimestamps","params":"","desc":"Determine if the model uses timestamps."},"isSoftDeleting":{"name":"isSoftDeleting","params":"","desc":"Determine if the model instance uses soft deletes."},"setSoftDeleting":{"name":"setSoftDeleting","params":"$enabled","desc":"Set the soft deleting property on the model."},"getPerPage":{"name":"getPerPage","params":"","desc":"Get the number of models to return per page."},"setPerPage":{"name":"setPerPage","params":"$perPage","desc":"Set the number of models ot return per page."},"getForeignKey":{"name":"getForeignKey","params":"","desc":"Get the default foreign key name for the model."},"getHidden":{"name":"getHidden","params":"","desc":"Get the hidden attributes for the model."},"setHidden":{"name":"setHidden","params":"$hidden","desc":"Set the hidden attributes for the model."},"setVisible":{"name":"setVisible","params":"$visible","desc":"Set the visible attributes for the model."},"setAppends":{"name":"setAppends","params":"$appends","desc":"Set the accessors to append to model arrays."},"getFillable":{"name":"getFillable","params":"","desc":"Get the fillable attributes for the model."},"fillable":{"name":"fillable","params":"$fillable","desc":"Set the fillable attributes for the model."},"guard":{"name":"guard","params":"$guarded","desc":"Set the guarded attributes for the model."},"unguard":{"name":"unguard","params":"","desc":"Disable all mass assignable restrictions."},"reguard":{"name":"reguard","params":"","desc":"Enable the mass assignment restrictions."},"setUnguardState":{"name":"setUnguardState","params":"$state","desc":"Set \"unguard\" to a given state."},"isFillable":{"name":"isFillable","params":"$key","desc":"Determine if the given attribute may be mass assigned."},"isGuarded":{"name":"isGuarded","params":"$key","desc":"Determine if the given key is guarded."},"totallyGuarded":{"name":"totallyGuarded","params":"","desc":"Determine if the model is totally guarded."},"getTouchedRelations":{"name":"getTouchedRelations","params":"","desc":"Get the relationships that are touched on save."},"setTouchedRelations":{"name":"setTouchedRelations","params":"$touches","desc":"Set the relationships that are touched on save."},"getIncrementing":{"name":"getIncrementing","params":"","desc":"Get the value indicating whether the IDs are incrementing."},"setIncrementing":{"name":"setIncrementing","params":"$value","desc":"Set whether IDs are incrementing."},"toJson":{"name":"toJson","params":"$options = 0","desc":"Convert the model instance to JSON."},"toArray":{"name":"toArray","params":"","desc":"Convert the model instance to an array."},"attributesToArray":{"name":"attributesToArray","params":"","desc":"Convert the model's attributes to an array."},"relationsToArray":{"name":"relationsToArray","params":"","desc":"Get the model's relationships in array form."},"getAttribute":{"name":"getAttribute","params":"$key","desc":"Get an attribute from the model."},"hasGetMutator":{"name":"hasGetMutator","params":"$key","desc":"Determine if a get mutator exists for an attribute."},"setAttribute":{"name":"setAttribute","params":"$key, $value","desc":"Set a given attribute on the model."},"hasSetMutator":{"name":"hasSetMutator","params":"$key","desc":"Determine if a set mutator exists for an attribute."},"getDates":{"name":"getDates","params":"","desc":"Get the attributes that should be converted to dates."},"fromDateTime":{"name":"fromDateTime","params":"$value","desc":"Convert a DateTime to a storable string."},"replicate":{"name":"replicate","params":"","desc":"Clone the model into a new, non-existing instance."},"getAttributes":{"name":"getAttributes","params":"","desc":"Get all of the current attributes on the model."},"setRawAttributes":{"name":"setRawAttributes","params":"$attributes, $sync = false","desc":"Set the array of model attributes. No checking is done."},"getOriginal":{"name":"getOriginal","params":"$key = null, $default = null","desc":"Get the model's original attribute values."},"syncOriginal":{"name":"syncOriginal","params":"","desc":"Sync the original attributes with the current."},"isDirty":{"name":"isDirty","params":"$attribute","desc":"Determine if a given attribute is dirty."},"getDirty":{"name":"getDirty","params":"","desc":"Get the attributes that have been changed since last sync."},"getRelations":{"name":"getRelations","params":"","desc":"Get all the loaded relations for the instance."},"getRelation":{"name":"getRelation","params":"$relation","desc":"Get a specified relationship."},"setRelation":{"name":"setRelation","params":"$relation, $value","desc":"Set the specific relationship in the model."},"setRelations":{"name":"setRelations","params":"$relations","desc":"Set the entire relations array on the model."},"getConnection":{"name":"getConnection","params":"","desc":"Get the database connection for the model."},"getConnectionName":{"name":"getConnectionName","params":"","desc":"Get the current connection name for the model."},"setConnection":{"name":"setConnection","params":"$name","desc":"Set the connection associated with the model."},"resolveConnection":{"name":"resolveConnection","params":"$connection = null","desc":"Resolve a connection instance."},"getConnectionResolver":{"name":"getConnectionResolver","params":"","desc":"Get the connection resolver instance."},"setConnectionResolver":{"name":"setConnectionResolver","params":"$resolver","desc":"Set the connection resolver instance."},"getEventDispatcher":{"name":"getEventDispatcher","params":"","desc":"Get the event dispatcher instance."},"setEventDispatcher":{"name":"setEventDispatcher","params":"$dispatcher","desc":"Set the event dispatcher instance."},"unsetEventDispatcher":{"name":"unsetEventDispatcher","params":"","desc":"Unset the event dispatcher for models."},"getMutatedAttributes":{"name":"getMutatedAttributes","params":"","desc":"Get the mutated attributes for a given instance."},"offsetExists":{"name":"offsetExists","params":"$offset","desc":"Determine if the given attribute exists."},"offsetGet":{"name":"offsetGet","params":"$offset","desc":"Get the value for a given offset."},"offsetSet":{"name":"offsetSet","params":"$offset, $value","desc":"Set the value for a given offset."},"offsetUnset":{"name":"offsetUnset","params":"$offset","desc":"Unset the value for a given offset."}},"Illuminate\\Database\\Eloquent\\Builder":{"findMany":{"name":"findMany","params":"$id, $columns = array()","desc":"Find a model by its primary key."},"first":{"name":"first","params":"$columns = array()","desc":"Execute the query and get the first result."},"firstOrFail":{"name":"firstOrFail","params":"$columns = array()","desc":"Execute the query and get the first result or throw an exception."},"get":{"name":"get","params":"$columns = array()","desc":"Execute the query as a \"select\" statement."},"pluck":{"name":"pluck","params":"$column","desc":"Pluck a single column from the database."},"chunk":{"name":"chunk","params":"$count, $callback","desc":"Chunk the results of the query."},"lists":{"name":"lists","params":"$column, $key = null","desc":"Get an array with the values of a given column."},"paginate":{"name":"paginate","params":"$perPage = null, $columns = array()","desc":"Get a paginator for the \"select\" statement."},"increment":{"name":"increment","params":"$column, $amount = 1, $extra = array()","desc":"Increment a column's value by a given amount."},"decrement":{"name":"decrement","params":"$column, $amount = 1, $extra = array()","desc":"Decrement a column's value by a given amount."},"getModels":{"name":"getModels","params":"$columns = array()","desc":"Get the hydrated models without eager loading."},"eagerLoadRelations":{"name":"eagerLoadRelations","params":"$models","desc":"Eager load the relationships for the models."},"has":{"name":"has","params":"$relation, $operator = '>=', $count = 1, $boolean = 'and'","desc":"Add a relationship count condition to the query."},"orHas":{"name":"orHas","params":"$relation, $operator = '>=', $count = 1","desc":"Add a relationship count condition to the query with an \"or\"."},"getQuery":{"name":"getQuery","params":"","desc":"Get the underlying query builder instance."},"setQuery":{"name":"setQuery","params":"$query","desc":"Set the underlying query builder instance."},"getEagerLoads":{"name":"getEagerLoads","params":"","desc":"Get the relationships being eagerly loaded."},"setEagerLoads":{"name":"setEagerLoads","params":"$eagerLoad","desc":"Set the relationships being eagerly loaded."},"getModel":{"name":"getModel","params":"","desc":"Get the model instance being queried."},"setModel":{"name":"setModel","params":"$model","desc":"Set a model instance for the model being queried."}},"Illuminate\\Database\\Query\\Builder":{"select":{"name":"select","params":"$columns = array()","desc":"Set the columns to be selected."},"addSelect":{"name":"addSelect","params":"$column","desc":"Add a new select column to the query."},"distinct":{"name":"distinct","params":"","desc":"Force the query to only return distinct results."},"from":{"name":"from","params":"$table","desc":"Set the table which the query is targeting."},"join":{"name":"join","params":"$table, $first, $operator = null, $second = null, $type = 'inner'","desc":"Add a join clause to the query."},"leftJoin":{"name":"leftJoin","params":"$table, $first, $operator = null, $second = null","desc":"Add a left join to the query."},"where":{"name":"where","params":"$column, $operator = null, $value = null, $boolean = 'and'","desc":"Add a basic where clause to the query."},"orWhere":{"name":"orWhere","params":"$column, $operator = null, $value = null","desc":"Add an \"or where\" clause to the query."},"whereRaw":{"name":"whereRaw","params":"$sql, $bindings = array(), $boolean = 'and'","desc":"Add a raw where clause to the query."},"orWhereRaw":{"name":"orWhereRaw","params":"$sql, $bindings = array()","desc":"Add a raw or where clause to the query."},"whereBetween":{"name":"whereBetween","params":"$column, $values, $boolean = 'and'","desc":"Add a where between statement to the query."},"orWhereBetween":{"name":"orWhereBetween","params":"$column, $values","desc":"Add an or where between statement to the query."},"whereNested":{"name":"whereNested","params":"$callback, $boolean = 'and'","desc":"Add a nested where statement to the query."},"whereExists":{"name":"whereExists","params":"$callback, $boolean = 'and', $not = false","desc":"Add an exists clause to the query."},"orWhereExists":{"name":"orWhereExists","params":"$callback, $not = false","desc":"Add an or exists clause to the query."},"whereNotExists":{"name":"whereNotExists","params":"$callback, $boolean = 'and'","desc":"Add a where not exists clause to the query."},"orWhereNotExists":{"name":"orWhereNotExists","params":"$callback","desc":"Add a where not exists clause to the query."},"whereIn":{"name":"whereIn","params":"$column, $values, $boolean = 'and', $not = false","desc":"Add a \"where in\" clause to the query."},"orWhereIn":{"name":"orWhereIn","params":"$column, $values","desc":"Add an \"or where in\" clause to the query."},"whereNotIn":{"name":"whereNotIn","params":"$column, $values, $boolean = 'and'","desc":"Add a \"where not in\" clause to the query."},"orWhereNotIn":{"name":"orWhereNotIn","params":"$column, $values","desc":"Add an \"or where not in\" clause to the query."},"whereNull":{"name":"whereNull","params":"$column, $boolean = 'and', $not = false","desc":"Add a \"where null\" clause to the query."},"orWhereNull":{"name":"orWhereNull","params":"$column","desc":"Add an \"or where null\" clause to the query."},"whereNotNull":{"name":"whereNotNull","params":"$column, $boolean = 'and'","desc":"Add a \"where not null\" clause to the query."},"orWhereNotNull":{"name":"orWhereNotNull","params":"$column","desc":"Add an \"or where not null\" clause to the query."},"dynamicWhere":{"name":"dynamicWhere","params":"$method, $parameters","desc":"Handles dynamic \"where\" clauses to the query."},"groupBy":{"name":"groupBy","params":"","desc":"Add a \"group by\" clause to the query."},"having":{"name":"having","params":"$column, $operator = null, $value = null","desc":"Add a \"having\" clause to the query."},"havingRaw":{"name":"havingRaw","params":"$sql, $bindings = array(), $boolean = 'and'","desc":"Add a raw having clause to the query."},"orHavingRaw":{"name":"orHavingRaw","params":"$sql, $bindings = array()","desc":"Add a raw or having clause to the query."},"orderBy":{"name":"orderBy","params":"$column, $direction = 'asc'","desc":"Add an \"order by\" clause to the query."},"orderByRaw":{"name":"orderByRaw","params":"$sql, $bindings = array()","desc":"Add a raw \"order by\" clause to the query."},"offset":{"name":"offset","params":"$value","desc":"Set the \"offset\" value of the query."},"skip":{"name":"skip","params":"$value","desc":"Alias to set the \"offset\" value of the query."},"limit":{"name":"limit","params":"$value","desc":"Set the \"limit\" value of the query."},"take":{"name":"take","params":"$value","desc":"Alias to set the \"limit\" value of the query."},"forPage":{"name":"forPage","params":"$page, $perPage = 15","desc":"Set the limit and offset for a given page."},"union":{"name":"union","params":"$query, $all = false","desc":"Add a union statement to the query."},"unionAll":{"name":"unionAll","params":"$query","desc":"Add a union all statement to the query."},"toSql":{"name":"toSql","params":"","desc":"Get the SQL representation of the query."},"remember":{"name":"remember","params":"$minutes, $key = null","desc":"Indicate that the query results should be cached."},"getFresh":{"name":"getFresh","params":"$columns = array()","desc":"Execute the query as a fresh \"select\" statement."},"getCached":{"name":"getCached","params":"$columns = array()","desc":"Execute the query as a cached \"select\" statement."},"getCacheKey":{"name":"getCacheKey","params":"","desc":"Get a unique cache key for the complete query."},"generateCacheKey":{"name":"generateCacheKey","params":"","desc":"Generate the unique cache key for the query."},"implode":{"name":"implode","params":"$column, $glue = null","desc":"Concatenate values of a given column as a string."},"buildRawPaginator":{"name":"buildRawPaginator","params":"$paginator, $results, $perPage","desc":"Build a paginator instance from a raw result array."},"getPaginationCount":{"name":"getPaginationCount","params":"","desc":"Get the count of the total records for pagination."},"exists":{"name":"exists","params":"","desc":"Determine if any rows exist for the current query."},"count":{"name":"count","params":"$column = '*'","desc":"Retrieve the \"count\" result of the query."},"min":{"name":"min","params":"$column","desc":"Retrieve the minimum value of a given column."},"max":{"name":"max","params":"$column","desc":"Retrieve the maximum value of a given column."},"sum":{"name":"sum","params":"$column","desc":"Retrieve the sum of the values of a given column."},"avg":{"name":"avg","params":"$column","desc":"Retrieve the average of the values of a given column."},"aggregate":{"name":"aggregate","params":"$function, $columns = array()","desc":"Execute an aggregate function on the database."},"insert":{"name":"insert","params":"$values","desc":"Insert a new record into the database."},"insertGetId":{"name":"insertGetId","params":"$values, $sequence = null","desc":"Insert a new record and get the value of the primary key."},"truncate":{"name":"truncate","params":"","desc":"Run a truncate statement on the table."},"mergeWheres":{"name":"mergeWheres","params":"$wheres, $bindings","desc":"Merge an array of where clauses and bindings."},"raw":{"name":"raw","params":"$value","desc":"Create a raw database expression."},"getBindings":{"name":"getBindings","params":"","desc":"Get the current query value bindings."},"setBindings":{"name":"setBindings","params":"$bindings","desc":"Set the bindings on the query builder."},"mergeBindings":{"name":"mergeBindings","params":"$query","desc":"Merge an array of bindings into our bindings."},"getProcessor":{"name":"getProcessor","params":"","desc":"Get the database query processor instance."},"getGrammar":{"name":"getGrammar","params":"","desc":"Get the query grammar instance."}}}},"Event":{"root":"Illuminate\\Events\\Dispatcher","facade":"Illuminate\\Support\\Facades\\Event","methods":{"Illuminate\\Events\\Dispatcher":{"listen":{"name":"listen","params":"$event, $listener, $priority = 0","desc":"Register an event listener with the dispatcher."},"hasListeners":{"name":"hasListeners","params":"$eventName","desc":"Determine if a given event has listeners."},"queue":{"name":"queue","params":"$event, $payload = array()","desc":"Register a queued event and payload."},"subscribe":{"name":"subscribe","params":"$subscriber","desc":"Register an event subscriber with the dispatcher."},"until":{"name":"until","params":"$event, $payload = array()","desc":"Fire an event until the first non-null response is returned."},"flush":{"name":"flush","params":"$event","desc":"Flush a set of queued events."},"fire":{"name":"fire","params":"$event, $payload = array(), $halt = false","desc":"Fire an event and call the listeners."},"getListeners":{"name":"getListeners","params":"$eventName","desc":"Get all of the listeners for a given event name."},"makeListener":{"name":"makeListener","params":"$listener","desc":"Register an event listener with the dispatcher."},"createClassListener":{"name":"createClassListener","params":"$listener","desc":"Create a class based listener using the IoC container."},"forget":{"name":"forget","params":"$event","desc":"Remove a set of listeners from the dispatcher."}}}},"File":{"root":"Illuminate\\Filesystem\\Filesystem","facade":"Illuminate\\Support\\Facades\\File","methods":{"Illuminate\\Filesystem\\Filesystem":{"exists":{"name":"exists","params":"$path","desc":"Determine if a file exists."},"get":{"name":"get","params":"$path","desc":"Get the contents of a file."},"getRemote":{"name":"getRemote","params":"$path","desc":"Get the contents of a remote file."},"getRequire":{"name":"getRequire","params":"$path","desc":"Get the returned value of a file."},"requireOnce":{"name":"requireOnce","params":"$file","desc":"Require the given file once."},"put":{"name":"put","params":"$path, $contents","desc":"Write the contents of a file."},"prepend":{"name":"prepend","params":"$path, $data","desc":"Prepend to a file."},"append":{"name":"append","params":"$path, $data","desc":"Append to a file."},"delete":{"name":"delete","params":"$path","desc":"Delete the file at a given path."},"move":{"name":"move","params":"$path, $target","desc":"Move a file to a new location."},"copy":{"name":"copy","params":"$path, $target","desc":"Copy a file to a new location."},"extension":{"name":"extension","params":"$path","desc":"Extract the file extension from a file path."},"type":{"name":"type","params":"$path","desc":"Get the file type of a given file."},"size":{"name":"size","params":"$path","desc":"Get the file size of a given file."},"lastModified":{"name":"lastModified","params":"$path","desc":"Get the file's last modification time."},"isDirectory":{"name":"isDirectory","params":"$directory","desc":"Determine if the given path is a directory."},"isWritable":{"name":"isWritable","params":"$path","desc":"Determine if the given path is writable."},"isFile":{"name":"isFile","params":"$file","desc":"Determine if the given path is a file."},"glob":{"name":"glob","params":"$pattern, $flags = 0","desc":"Find path names matching a given pattern."},"files":{"name":"files","params":"$directory","desc":"Get an array of all files in a directory."},"allFiles":{"name":"allFiles","params":"$directory","desc":"Get all of the files from the given directory (recursive)."},"directories":{"name":"directories","params":"$directory","desc":"Get all of the directories within a given directory."},"makeDirectory":{"name":"makeDirectory","params":"$path, $mode = 511, $recursive = false","desc":"Create a directory."},"copyDirectory":{"name":"copyDirectory","params":"$directory, $destination, $options = null","desc":"Copy a directory from one location to another."},"deleteDirectory":{"name":"deleteDirectory","params":"$directory, $preserve = false","desc":"Recursively delete a directory."},"cleanDirectory":{"name":"cleanDirectory","params":"$directory","desc":"Empty the specified directory of all files and folders."}}}},"Form":{"root":"Illuminate\\Html\\FormBuilder","facade":"Illuminate\\Support\\Facades\\Form","methods":{"Illuminate\\Html\\FormBuilder":{"open":{"name":"open","params":"$options = array()","desc":"Open up a new HTML form."},"model":{"name":"model","params":"$model, $options = array()","desc":"Create a new model based form builder."},"close":{"name":"close","params":"","desc":"Close the current form."},"token":{"name":"token","params":"","desc":"Generate a hidden field with the current CSRF token."},"label":{"name":"label","params":"$name, $value = null, $options = array()","desc":"Create a form label element."},"input":{"name":"input","params":"$type, $name, $value = null, $options = array()","desc":"Create a form input field."},"text":{"name":"text","params":"$name, $value = null, $options = array()","desc":"Create a text input field."},"password":{"name":"password","params":"$name, $options = array()","desc":"Create a password input field."},"hidden":{"name":"hidden","params":"$name, $value = null, $options = array()","desc":"Create a hidden input field."},"email":{"name":"email","params":"$name, $value = null, $options = array()","desc":"Create an e-mail input field."},"url":{"name":"url","params":"$name, $value = null, $options = array()","desc":"Create a url input field."},"file":{"name":"file","params":"$name, $options = array()","desc":"Create a file input field."},"textarea":{"name":"textarea","params":"$name, $value = null, $options = array()","desc":"Create a textarea input field."},"select":{"name":"select","params":"$name, $list = array(), $selected = null, $options = array()","desc":"Create a select box field."},"selectRange":{"name":"selectRange","params":"$name, $begin, $end, $selected = null, $options = array()","desc":"Create a select range field."},"selectYear":{"name":"selectYear","params":"","desc":"Create a select year field."},"selectMonth":{"name":"selectMonth","params":"$name, $selected = null, $options = array()","desc":"Create a select month field."},"checkbox":{"name":"checkbox","params":"$name, $value = 1, $checked = null, $options = array()","desc":"Create a checkbox input field."},"radio":{"name":"radio","params":"$name, $value = null, $checked = null, $options = array()","desc":"Create a radio button input field."},"reset":{"name":"reset","params":"$value, $attributes = array()","desc":"Create a HTML reset input element."},"image":{"name":"image","params":"$url, $name = null, $attributes = array()","desc":"Create a HTML image input element."},"submit":{"name":"submit","params":"$value = null, $options = array()","desc":"Create a submit button element."},"button":{"name":"button","params":"$value = null, $options = array()","desc":"Create a button element."},"macro":{"name":"macro","params":"$name, $macro","desc":"Register a custom form macro."},"getValueAttribute":{"name":"getValueAttribute","params":"$name, $value = null","desc":"Get the value that should be assigned to the field."},"old":{"name":"old","params":"$name","desc":"Get a value from the session's old input."},"oldInputIsEmpty":{"name":"oldInputIsEmpty","params":"","desc":"Determine if the old input is empty."},"getSessionStore":{"name":"getSessionStore","params":"","desc":"Get the session store implementation."},"setSessionStore":{"name":"setSessionStore","params":"$session","desc":"Set the session store implementation."}}}},"Hash":{"root":"Illuminate\\Hashing\\BcryptHasher","facade":"Illuminate\\Support\\Facades\\Hash","methods":{"Illuminate\\Hashing\\BcryptHasher":{"make":{"name":"make","params":"$value, $options = array()","desc":"Hash the given value."},"check":{"name":"check","params":"$value, $hashedValue, $options = array()","desc":"Check the given plain value against a hash."},"needsRehash":{"name":"needsRehash","params":"$hashedValue, $options = array()","desc":"Check if the given hash has been hashed using the given options."}}}},"HTML":{"root":"Illuminate\\Html\\HtmlBuilder","facade":"Illuminate\\Support\\Facades\\HTML","methods":{"Illuminate\\Html\\HtmlBuilder":{"macro":{"name":"macro","params":"$name, $macro","desc":"Register a custom HTML macro."},"entities":{"name":"entities","params":"$value","desc":"Convert an HTML string to entities."},"decode":{"name":"decode","params":"$value","desc":"Convert entities to HTML characters."},"script":{"name":"script","params":"$url, $attributes = array()","desc":"Generate a link to a JavaScript file."},"style":{"name":"style","params":"$url, $attributes = array()","desc":"Generate a link to a CSS file."},"image":{"name":"image","params":"$url, $alt = null, $attributes = array()","desc":"Generate an HTML image element."},"link":{"name":"link","params":"$url, $title = null, $attributes = array(), $secure = null","desc":"Generate a HTML link."},"secureLink":{"name":"secureLink","params":"$url, $title = null, $attributes = array()","desc":"Generate a HTTPS HTML link."},"linkAsset":{"name":"linkAsset","params":"$url, $title = null, $attributes = array(), $secure = null","desc":"Generate a HTML link to an asset."},"linkSecureAsset":{"name":"linkSecureAsset","params":"$url, $title = null, $attributes = array()","desc":"Generate a HTTPS HTML link to an asset."},"linkRoute":{"name":"linkRoute","params":"$name, $title = null, $parameters = array(), $attributes = array()","desc":"Generate a HTML link to a named route."},"linkAction":{"name":"linkAction","params":"$action, $title = null, $parameters = array(), $attributes = array()","desc":"Generate a HTML link to a controller action."},"mailto":{"name":"mailto","params":"$email, $title = null, $attributes = array()","desc":"Generate a HTML link to an email address."},"email":{"name":"email","params":"$email","desc":"Obfuscate an e-mail address to prevent spam-bots from sniffing it."},"ol":{"name":"ol","params":"$list, $attributes = array()","desc":"Generate an ordered list of items."},"ul":{"name":"ul","params":"$list, $attributes = array()","desc":"Generate an un-ordered list of items."},"attributes":{"name":"attributes","params":"$attributes","desc":"Build an HTML attribute string from an array."},"obfuscate":{"name":"obfuscate","params":"$value","desc":"Obfuscate a string to prevent spam-bots from sniffing it."}}}},"Input":{"root":"Illuminate\\Http\\Request","facade":"Illuminate\\Support\\Facades\\Input","methods":{"Illuminate\\Http\\Request":{"instance":{"name":"instance","params":"","desc":"Return the Request instance."},"root":{"name":"root","params":"","desc":"Get the root URL for the application."},"url":{"name":"url","params":"","desc":"Get the URL (no query string) for the request."},"fullUrl":{"name":"fullUrl","params":"","desc":"Get the full URL for the request."},"path":{"name":"path","params":"","desc":"Get the current path info for the request."},"segment":{"name":"segment","params":"$index, $default = null","desc":"Get a segment from the URI (1 based index)."},"segments":{"name":"segments","params":"","desc":"Get all of the segments for the request path."},"is":{"name":"is","params":"$pattern","desc":"Determine if the current request URI matches a pattern."},"ajax":{"name":"ajax","params":"","desc":"Determine if the request is the result of an AJAX call."},"secure":{"name":"secure","params":"","desc":"Determine if the request is over HTTPS."},"has":{"name":"has","params":"$key","desc":"Determine if the request contains a given input item."},"all":{"name":"all","params":"","desc":"Get all of the input and files for the request."},"input":{"name":"input","params":"$key = null, $default = null","desc":"Retrieve an input item from the request."},"only":{"name":"only","params":"$keys","desc":"Get a subset of the items from the input data."},"except":{"name":"except","params":"$keys","desc":"Get all of the input except for a specified array of items."},"query":{"name":"query","params":"$key = null, $default = null","desc":"Retrieve a query string item from the request."},"cookie":{"name":"cookie","params":"$key = null, $default = null","desc":"Retrieve a cookie from the request."},"file":{"name":"file","params":"$key = null, $default = null","desc":"Retrieve a file from the request."},"hasFile":{"name":"hasFile","params":"$key","desc":"Determine if the uploaded data contains a file."},"header":{"name":"header","params":"$key = null, $default = null","desc":"Retrieve a header from the request."},"server":{"name":"server","params":"$key = null, $default = null","desc":"Retrieve a server variable from the request."},"old":{"name":"old","params":"$key = null, $default = null","desc":"Retrieve an old input item."},"flash":{"name":"flash","params":"$filter = null, $keys = array()","desc":"Flash the input for the current request to the session."},"flashOnly":{"name":"flashOnly","params":"$keys","desc":"Flash only some of the input to the session."},"flashExcept":{"name":"flashExcept","params":"$keys","desc":"Flash only some of the input to the session."},"flush":{"name":"flush","params":"","desc":"Flush all of the old input from the session."},"merge":{"name":"merge","params":"$input","desc":"Merge new input into the current request's input array."},"replace":{"name":"replace","params":"$input","desc":"Replace the input for the current request."},"json":{"name":"json","params":"$key = null, $default = null","desc":"Get the JSON payload for the request."},"isJson":{"name":"isJson","params":"","desc":"Determine if the request is sending JSON."},"wantsJson":{"name":"wantsJson","params":"","desc":"Determine if the current request is asking for JSON in return."},"format":{"name":"format","params":"$default = 'html'","desc":"Get the data format expected in the response."},"getSessionStore":{"name":"getSessionStore","params":"","desc":"Get the Illuminate session store implementation."},"setSessionStore":{"name":"setSessionStore","params":"$session","desc":"Set the Illuminate session store implementation."},"hasSessionStore":{"name":"hasSessionStore","params":"","desc":"Determine if the session store has been set."}},"Symfony\\Component\\HttpFoundation\\Request":{"initialize":{"name":"initialize","params":"$query = array(), $request = array(), $attributes = array(), $cookies = array(), $files = array(), $server = array(), $content = null","desc":"Sets the parameters for this request."},"createFromGlobals":{"name":"createFromGlobals","params":"","desc":"Creates a new request with values from PHP's super globals."},"create":{"name":"create","params":"$uri, $method = 'GET', $parameters = array(), $cookies = array(), $files = array(), $server = array(), $content = null","desc":"Creates a Request based on a given URI and configuration."},"duplicate":{"name":"duplicate","params":"$query = null, $request = null, $attributes = null, $cookies = null, $files = null, $server = null","desc":"Clones a request and overrides some of its parameters."},"overrideGlobals":{"name":"overrideGlobals","params":"","desc":"Overrides the PHP global variables according to this request instance."},"setTrustedProxies":{"name":"setTrustedProxies","params":"$proxies","desc":"Sets a list of trusted proxies."},"getTrustedProxies":{"name":"getTrustedProxies","params":"","desc":"Gets the list of trusted proxies."},"setTrustedHosts":{"name":"setTrustedHosts","params":"$hostPatterns","desc":"Sets a list of trusted host patterns."},"getTrustedHosts":{"name":"getTrustedHosts","params":"","desc":"Gets the list of trusted host patterns."},"setTrustedHeaderName":{"name":"setTrustedHeaderName","params":"$key, $value","desc":"Sets the name for trusted headers."},"getTrustedHeaderName":{"name":"getTrustedHeaderName","params":"$key","desc":"Gets the trusted proxy header name."},"normalizeQueryString":{"name":"normalizeQueryString","params":"$qs","desc":"Normalizes a query string."},"enableHttpMethodParameterOverride":{"name":"enableHttpMethodParameterOverride","params":"","desc":"Enables support for the _method request parameter to determine the intended HTTP method."},"getHttpMethodParameterOverride":{"name":"getHttpMethodParameterOverride","params":"","desc":"Checks whether support for the _method request parameter is enabled."},"get":{"name":"get","params":"$key, $default = null, $deep = false","desc":"Gets a \"parameter\" value."},"getSession":{"name":"getSession","params":"","desc":"Gets the Session."},"hasPreviousSession":{"name":"hasPreviousSession","params":"","desc":"Whether the request contains a Session which was started in one of the\nprevious requests."},"hasSession":{"name":"hasSession","params":"","desc":"Whether the request contains a Session object."},"setSession":{"name":"setSession","params":"$session","desc":"Sets the Session."},"getClientIps":{"name":"getClientIps","params":"","desc":"Returns the client IP addresses."},"getClientIp":{"name":"getClientIp","params":"","desc":"Returns the client IP address."},"getScriptName":{"name":"getScriptName","params":"","desc":"Returns current script name."},"getPathInfo":{"name":"getPathInfo","params":"","desc":"Returns the path being requested relative to the executed script."},"getBasePath":{"name":"getBasePath","params":"","desc":"Returns the root path from which this request is executed."},"getBaseUrl":{"name":"getBaseUrl","params":"","desc":"Returns the root url from which this request is executed."},"getScheme":{"name":"getScheme","params":"","desc":"Gets the request's scheme."},"getPort":{"name":"getPort","params":"","desc":"Returns the port on which the request is made."},"getUser":{"name":"getUser","params":"","desc":"Returns the user."},"getPassword":{"name":"getPassword","params":"","desc":"Returns the password."},"getUserInfo":{"name":"getUserInfo","params":"","desc":"Gets the user info."},"getHttpHost":{"name":"getHttpHost","params":"","desc":"Returns the HTTP host being requested."},"getRequestUri":{"name":"getRequestUri","params":"","desc":"Returns the requested URI."},"getSchemeAndHttpHost":{"name":"getSchemeAndHttpHost","params":"","desc":"Gets the scheme and HTTP host."},"getUri":{"name":"getUri","params":"","desc":"Generates a normalized URI for the Request."},"getUriForPath":{"name":"getUriForPath","params":"$path","desc":"Generates a normalized URI for the given path."},"getQueryString":{"name":"getQueryString","params":"","desc":"Generates the normalized query string for the Request."},"isSecure":{"name":"isSecure","params":"","desc":"Checks whether the request is secure or not."},"getHost":{"name":"getHost","params":"","desc":"Returns the host name."},"setMethod":{"name":"setMethod","params":"$method","desc":"Sets the request method."},"getMethod":{"name":"getMethod","params":"","desc":"Gets the request \"intended\" method."},"getRealMethod":{"name":"getRealMethod","params":"","desc":"Gets the \"real\" request method."},"getMimeType":{"name":"getMimeType","params":"$format","desc":"Gets the mime type associated with the format."},"getFormat":{"name":"getFormat","params":"$mimeType","desc":"Gets the format associated with the mime type."},"setFormat":{"name":"setFormat","params":"$format, $mimeTypes","desc":"Associates a format with mime types."},"getRequestFormat":{"name":"getRequestFormat","params":"$default = 'html'","desc":"Gets the request format."},"setRequestFormat":{"name":"setRequestFormat","params":"$format","desc":"Sets the request format."},"getContentType":{"name":"getContentType","params":"","desc":"Gets the format associated with the request."},"setDefaultLocale":{"name":"setDefaultLocale","params":"$locale","desc":"Sets the default locale."},"setLocale":{"name":"setLocale","params":"$locale","desc":"Sets the locale."},"getLocale":{"name":"getLocale","params":"","desc":"Get the locale."},"isMethod":{"name":"isMethod","params":"$method","desc":"Checks if the request method is of specified type."},"isMethodSafe":{"name":"isMethodSafe","params":"","desc":"Checks whether the method is safe or not."},"getContent":{"name":"getContent","params":"$asResource = false","desc":"Returns the request body content."},"getETags":{"name":"getETags","params":"","desc":"Gets the Etags."},"isNoCache":{"name":"isNoCache","params":"","desc":""},"getPreferredLanguage":{"name":"getPreferredLanguage","params":"$locales = null","desc":"Returns the preferred language."},"getLanguages":{"name":"getLanguages","params":"","desc":"Gets a list of languages acceptable by the client browser."},"getCharsets":{"name":"getCharsets","params":"","desc":"Gets a list of charsets acceptable by the client browser."},"getAcceptableContentTypes":{"name":"getAcceptableContentTypes","params":"","desc":"Gets a list of content types acceptable by the client browser"},"isXmlHttpRequest":{"name":"isXmlHttpRequest","params":"","desc":"Returns true if the request is a XMLHttpRequest."}}}},"Lang":{"root":"Illuminate\\Translation\\Translator","facade":"Illuminate\\Support\\Facades\\Lang","methods":{"Illuminate\\Translation\\Translator":{"has":{"name":"has","params":"$key, $locale = null","desc":"Determine if a translation exists."},"get":{"name":"get","params":"$key, $replace = array(), $locale = null","desc":"Get the translation for the given key."},"choice":{"name":"choice","params":"$key, $number, $replace = array(), $locale = null","desc":"Get a translation according to an integer value."},"trans":{"name":"trans","params":"$id, $parameters = array(), $domain = 'messages', $locale = null","desc":"Get the translation for a given key."},"transChoice":{"name":"transChoice","params":"$id, $number, $parameters = array(), $domain = 'messages', $locale = null","desc":"Get a translation according to an integer value."},"load":{"name":"load","params":"$namespace, $group, $locale","desc":"Load the specified language group."},"addNamespace":{"name":"addNamespace","params":"$namespace, $hint","desc":"Add a new namespace to the loader."},"parseKey":{"name":"parseKey","params":"$key","desc":"Parse a key into namespace, group, and item."},"getSelector":{"name":"getSelector","params":"","desc":"Get the message selector instance."},"setSelector":{"name":"setSelector","params":"$selector","desc":"Set the message selector instance."},"getLoader":{"name":"getLoader","params":"","desc":"Get the language line loader implementation."},"locale":{"name":"locale","params":"","desc":"Get the default locale being used."},"getLocale":{"name":"getLocale","params":"","desc":"Get the default locale being used."},"setLocale":{"name":"setLocale","params":"$locale","desc":"Set the default locale."}},"Illuminate\\Support\\NamespacedItemResolver":{"setParsedKey":{"name":"setParsedKey","params":"$key, $parsed","desc":"Set the parsed value of a key."}}}},"Log":{"root":"Illuminate\\Log\\Writer","facade":"Illuminate\\Support\\Facades\\Log","methods":{"Illuminate\\Log\\Writer":{"useFiles":{"name":"useFiles","params":"$path, $level = 'debug'","desc":"Register a file log handler."},"useDailyFiles":{"name":"useDailyFiles","params":"$path, $days = 0, $level = 'debug'","desc":"Register a daily file log handler."},"getMonolog":{"name":"getMonolog","params":"","desc":"Get the underlying Monolog instance."},"listen":{"name":"listen","params":"$callback","desc":"Register a new callback handler for when\na log event is triggered."},"getEventDispatcher":{"name":"getEventDispatcher","params":"","desc":"Get the event dispatcher instance."},"setEventDispatcher":{"name":"setEventDispatcher","params":"$dispatcher","desc":"Set the event dispatcher instance."}},"Monolog\\Logger":{"debug":{"name":"debug","params":"$message, $context = array()","desc":"Adds a log record at the DEBUG level."},"info":{"name":"info","params":"$message, $context = array()","desc":"Adds a log record at the INFO level."},"notice":{"name":"notice","params":"$message, $context = array()","desc":"Adds a log record at the NOTICE level."},"warning":{"name":"warning","params":"$message, $context = array()","desc":"Adds a log record at the WARNING level."},"error":{"name":"error","params":"$message, $context = array()","desc":"Adds a log record at the ERROR level."},"critical":{"name":"critical","params":"$message, $context = array()","desc":"Adds a log record at the CRITICAL level."},"alert":{"name":"alert","params":"$message, $context = array()","desc":"Adds a log record at the ALERT level."},"emergency":{"name":"emergency","params":"$message, $context = array()","desc":"Adds a log record at the EMERGENCY level."}}}},"Mail":{"root":"Illuminate\\Mail\\Mailer","facade":"Illuminate\\Support\\Facades\\Mail","methods":{"Illuminate\\Mail\\Mailer":{"alwaysFrom":{"name":"alwaysFrom","params":"$address, $name = null","desc":"Set the global from address and name."},"plain":{"name":"plain","params":"$view, $data, $callback","desc":"Send a new message when only a plain part."},"send":{"name":"send","params":"$view, $data, $callback","desc":"Send a new message using a view."},"queue":{"name":"queue","params":"$view, $data, $callback, $queue = null","desc":"Queue a new e-mail message for sending."},"queueOn":{"name":"queueOn","params":"$queue, $view, $data, $callback","desc":"Queue a new e-mail message for sending on the given queue."},"later":{"name":"later","params":"$delay, $view, $data, $callback, $queue = null","desc":"Queue a new e-mail message for sending after (n) seconds."},"laterOn":{"name":"laterOn","params":"$queue, $delay, $view, $data, $callback","desc":"Queue a new e-mail message for sending after (n) seconds on the given queue."},"handleQueuedMessage":{"name":"handleQueuedMessage","params":"$job, $data","desc":"Handle a queued e-mail message job."},"pretend":{"name":"pretend","params":"$value = true","desc":"Tell the mailer to not really send messages."},"getViewEnvironment":{"name":"getViewEnvironment","params":"","desc":"Get the view environment instance."},"getSwiftMailer":{"name":"getSwiftMailer","params":"","desc":"Get the Swift Mailer instance."},"setSwiftMailer":{"name":"setSwiftMailer","params":"$swift","desc":"Set the Swift Mailer instance."},"setLogger":{"name":"setLogger","params":"$logger","desc":"Set the log writer instance."},"setQueue":{"name":"setQueue","params":"$queue","desc":"Set the queue manager instance."},"setContainer":{"name":"setContainer","params":"$container","desc":"Set the IoC container instance."}}}},"Paginator":{"root":"Illuminate\\Pagination\\Environment","facade":"Illuminate\\Support\\Facades\\Paginator","methods":{"Illuminate\\Pagination\\Environment":{"make":{"name":"make","params":"$items, $total, $perPage","desc":"Get a new paginator instance."},"getPaginationView":{"name":"getPaginationView","params":"$paginator","desc":"Get the pagination view."},"getCurrentPage":{"name":"getCurrentPage","params":"","desc":"Get the number of the current page."},"setCurrentPage":{"name":"setCurrentPage","params":"$number","desc":"Set the number of the current page."},"getCurrentUrl":{"name":"getCurrentUrl","params":"","desc":"Get the root URL for the request."},"setBaseUrl":{"name":"setBaseUrl","params":"$baseUrl","desc":"Set the base URL in use by the paginator."},"setPageName":{"name":"setPageName","params":"$pageName","desc":"Set the input page parameter name used by the paginator."},"getPageName":{"name":"getPageName","params":"","desc":"Get the input page parameter name used by the paginator."},"getViewName":{"name":"getViewName","params":"","desc":"Get the name of the pagination view."},"setViewName":{"name":"setViewName","params":"$viewName","desc":"Set the name of the pagination view."},"getLocale":{"name":"getLocale","params":"","desc":"Get the locale of the paginator."},"setLocale":{"name":"setLocale","params":"$locale","desc":"Set the locale of the paginator."},"getRequest":{"name":"getRequest","params":"","desc":"Get the active request instance."},"setRequest":{"name":"setRequest","params":"$request","desc":"Set the active request instance."},"getViewDriver":{"name":"getViewDriver","params":"","desc":"Get the current view driver."},"setViewDriver":{"name":"setViewDriver","params":"$view","desc":"Set the current view driver."},"getTranslator":{"name":"getTranslator","params":"","desc":"Get the translator instance."}}}},"Password":{"root":"Illuminate\\Auth\\Reminders\\PasswordBroker","facade":"Illuminate\\Support\\Facades\\Password","methods":{"Illuminate\\Auth\\Reminders\\PasswordBroker":{"remind":{"name":"remind","params":"$credentials, $callback = null","desc":"Send a password reminder to a user."},"sendReminder":{"name":"sendReminder","params":"$user, $token, $callback = null","desc":"Send the password reminder e-mail."},"reset":{"name":"reset","params":"$credentials, $callback","desc":"Reset the password for the given token."},"getUser":{"name":"getUser","params":"$credentials","desc":"Get the user for the given credentials."}}}},"Queue":{"root":"Illuminate\\Queue\\QueueManager","facade":"Illuminate\\Support\\Facades\\Queue","methods":{"Illuminate\\Queue\\QueueManager":{"connection":{"name":"connection","params":"$name = null","desc":"Resolve a queue connection instance."},"addConnector":{"name":"addConnector","params":"$driver, $resolver","desc":"Add a queue connection resolver."}},"Illuminate\\Queue\\SyncQueue":{"push":{"name":"push","params":"$job, $data = '', $queue = null","desc":"Push a new job onto the queue."},"later":{"name":"later","params":"$delay, $job, $data = '', $queue = null","desc":"Push a new job onto the queue after a delay."},"pop":{"name":"pop","params":"$queue = null","desc":"Pop the next job off of the queue."}},"Illuminate\\Queue\\Queue":{"marshal":{"name":"marshal","params":"","desc":"Marshal a push queue request and fire the job."},"bulk":{"name":"bulk","params":"$jobs, $data = '', $queue = null","desc":"Push a new an array of jobs onto the queue."},"getTime":{"name":"getTime","params":"","desc":"Get the current UNIX timestamp."},"setContainer":{"name":"setContainer","params":"$container","desc":"Set the IoC container instance."}}}},"Redirect":{"root":"Illuminate\\Routing\\Redirector","facade":"Illuminate\\Support\\Facades\\Redirect","methods":{"Illuminate\\Routing\\Redirector":{"home":{"name":"home","params":"$status = 302","desc":"Create a new redirect response to the \"home\" route."},"back":{"name":"back","params":"$status = 302, $headers = array()","desc":"Create a new redirect response to the previous location."},"refresh":{"name":"refresh","params":"$status = 302, $headers = array()","desc":"Create a new redirect response to the current URI."},"guest":{"name":"guest","params":"$path, $status = 302, $headers = array(), $secure = null","desc":"Create a new redirect response, while putting the current URL in the session."},"intended":{"name":"intended","params":"$default, $status = 302, $headers = array(), $secure = null","desc":"Create a new redirect response to the previously intended location."},"to":{"name":"to","params":"$path, $status = 302, $headers = array(), $secure = null","desc":"Create a new redirect response to the given path."},"away":{"name":"away","params":"$path, $status = 302, $headers = array()","desc":"Create a new redirect response to an external URL (no validation)."},"secure":{"name":"secure","params":"$path, $status = 302, $headers = array()","desc":"Create a new redirect response to the given HTTPS path."},"route":{"name":"route","params":"$route, $parameters = array(), $status = 302, $headers = array()","desc":"Create a new redirect response to a named route."},"action":{"name":"action","params":"$action, $parameters = array(), $status = 302, $headers = array()","desc":"Create a new redirect response to a controller action."},"getUrlGenerator":{"name":"getUrlGenerator","params":"","desc":"Get the URL generator instance."},"setSession":{"name":"setSession","params":"$session","desc":"Set the active session store."}}}},"Redis":{"root":"Illuminate\\Redis\\Database","facade":"Illuminate\\Support\\Facades\\Redis","methods":{"Illuminate\\Redis\\Database":{"connection":{"name":"connection","params":"$name = 'default'","desc":"Get a specific Redis connection instance."},"command":{"name":"command","params":"$method, $parameters = array()","desc":"Run a command against the Redis database."}}}},"Request":{"root":"Illuminate\\Http\\Request","facade":"Illuminate\\Support\\Facades\\Request","methods":{"Illuminate\\Http\\Request":{"instance":{"name":"instance","params":"","desc":"Return the Request instance."},"root":{"name":"root","params":"","desc":"Get the root URL for the application."},"url":{"name":"url","params":"","desc":"Get the URL (no query string) for the request."},"fullUrl":{"name":"fullUrl","params":"","desc":"Get the full URL for the request."},"path":{"name":"path","params":"","desc":"Get the current path info for the request."},"segment":{"name":"segment","params":"$index, $default = null","desc":"Get a segment from the URI (1 based index)."},"segments":{"name":"segments","params":"","desc":"Get all of the segments for the request path."},"is":{"name":"is","params":"$pattern","desc":"Determine if the current request URI matches a pattern."},"ajax":{"name":"ajax","params":"","desc":"Determine if the request is the result of an AJAX call."},"secure":{"name":"secure","params":"","desc":"Determine if the request is over HTTPS."},"has":{"name":"has","params":"$key","desc":"Determine if the request contains a given input item."},"all":{"name":"all","params":"","desc":"Get all of the input and files for the request."},"input":{"name":"input","params":"$key = null, $default = null","desc":"Retrieve an input item from the request."},"only":{"name":"only","params":"$keys","desc":"Get a subset of the items from the input data."},"except":{"name":"except","params":"$keys","desc":"Get all of the input except for a specified array of items."},"query":{"name":"query","params":"$key = null, $default = null","desc":"Retrieve a query string item from the request."},"cookie":{"name":"cookie","params":"$key = null, $default = null","desc":"Retrieve a cookie from the request."},"file":{"name":"file","params":"$key = null, $default = null","desc":"Retrieve a file from the request."},"hasFile":{"name":"hasFile","params":"$key","desc":"Determine if the uploaded data contains a file."},"header":{"name":"header","params":"$key = null, $default = null","desc":"Retrieve a header from the request."},"server":{"name":"server","params":"$key = null, $default = null","desc":"Retrieve a server variable from the request."},"old":{"name":"old","params":"$key = null, $default = null","desc":"Retrieve an old input item."},"flash":{"name":"flash","params":"$filter = null, $keys = array()","desc":"Flash the input for the current request to the session."},"flashOnly":{"name":"flashOnly","params":"$keys","desc":"Flash only some of the input to the session."},"flashExcept":{"name":"flashExcept","params":"$keys","desc":"Flash only some of the input to the session."},"flush":{"name":"flush","params":"","desc":"Flush all of the old input from the session."},"merge":{"name":"merge","params":"$input","desc":"Merge new input into the current request's input array."},"replace":{"name":"replace","params":"$input","desc":"Replace the input for the current request."},"json":{"name":"json","params":"$key = null, $default = null","desc":"Get the JSON payload for the request."},"isJson":{"name":"isJson","params":"","desc":"Determine if the request is sending JSON."},"wantsJson":{"name":"wantsJson","params":"","desc":"Determine if the current request is asking for JSON in return."},"format":{"name":"format","params":"$default = 'html'","desc":"Get the data format expected in the response."},"getSessionStore":{"name":"getSessionStore","params":"","desc":"Get the Illuminate session store implementation."},"setSessionStore":{"name":"setSessionStore","params":"$session","desc":"Set the Illuminate session store implementation."},"hasSessionStore":{"name":"hasSessionStore","params":"","desc":"Determine if the session store has been set."}},"Symfony\\Component\\HttpFoundation\\Request":{"initialize":{"name":"initialize","params":"$query = array(), $request = array(), $attributes = array(), $cookies = array(), $files = array(), $server = array(), $content = null","desc":"Sets the parameters for this request."},"createFromGlobals":{"name":"createFromGlobals","params":"","desc":"Creates a new request with values from PHP's super globals."},"create":{"name":"create","params":"$uri, $method = 'GET', $parameters = array(), $cookies = array(), $files = array(), $server = array(), $content = null","desc":"Creates a Request based on a given URI and configuration."},"duplicate":{"name":"duplicate","params":"$query = null, $request = null, $attributes = null, $cookies = null, $files = null, $server = null","desc":"Clones a request and overrides some of its parameters."},"overrideGlobals":{"name":"overrideGlobals","params":"","desc":"Overrides the PHP global variables according to this request instance."},"setTrustedProxies":{"name":"setTrustedProxies","params":"$proxies","desc":"Sets a list of trusted proxies."},"getTrustedProxies":{"name":"getTrustedProxies","params":"","desc":"Gets the list of trusted proxies."},"setTrustedHosts":{"name":"setTrustedHosts","params":"$hostPatterns","desc":"Sets a list of trusted host patterns."},"getTrustedHosts":{"name":"getTrustedHosts","params":"","desc":"Gets the list of trusted host patterns."},"setTrustedHeaderName":{"name":"setTrustedHeaderName","params":"$key, $value","desc":"Sets the name for trusted headers."},"getTrustedHeaderName":{"name":"getTrustedHeaderName","params":"$key","desc":"Gets the trusted proxy header name."},"normalizeQueryString":{"name":"normalizeQueryString","params":"$qs","desc":"Normalizes a query string."},"enableHttpMethodParameterOverride":{"name":"enableHttpMethodParameterOverride","params":"","desc":"Enables support for the _method request parameter to determine the intended HTTP method."},"getHttpMethodParameterOverride":{"name":"getHttpMethodParameterOverride","params":"","desc":"Checks whether support for the _method request parameter is enabled."},"get":{"name":"get","params":"$key, $default = null, $deep = false","desc":"Gets a \"parameter\" value."},"getSession":{"name":"getSession","params":"","desc":"Gets the Session."},"hasPreviousSession":{"name":"hasPreviousSession","params":"","desc":"Whether the request contains a Session which was started in one of the\nprevious requests."},"hasSession":{"name":"hasSession","params":"","desc":"Whether the request contains a Session object."},"setSession":{"name":"setSession","params":"$session","desc":"Sets the Session."},"getClientIps":{"name":"getClientIps","params":"","desc":"Returns the client IP addresses."},"getClientIp":{"name":"getClientIp","params":"","desc":"Returns the client IP address."},"getScriptName":{"name":"getScriptName","params":"","desc":"Returns current script name."},"getPathInfo":{"name":"getPathInfo","params":"","desc":"Returns the path being requested relative to the executed script."},"getBasePath":{"name":"getBasePath","params":"","desc":"Returns the root path from which this request is executed."},"getBaseUrl":{"name":"getBaseUrl","params":"","desc":"Returns the root url from which this request is executed."},"getScheme":{"name":"getScheme","params":"","desc":"Gets the request's scheme."},"getPort":{"name":"getPort","params":"","desc":"Returns the port on which the request is made."},"getUser":{"name":"getUser","params":"","desc":"Returns the user."},"getPassword":{"name":"getPassword","params":"","desc":"Returns the password."},"getUserInfo":{"name":"getUserInfo","params":"","desc":"Gets the user info."},"getHttpHost":{"name":"getHttpHost","params":"","desc":"Returns the HTTP host being requested."},"getRequestUri":{"name":"getRequestUri","params":"","desc":"Returns the requested URI."},"getSchemeAndHttpHost":{"name":"getSchemeAndHttpHost","params":"","desc":"Gets the scheme and HTTP host."},"getUri":{"name":"getUri","params":"","desc":"Generates a normalized URI for the Request."},"getUriForPath":{"name":"getUriForPath","params":"$path","desc":"Generates a normalized URI for the given path."},"getQueryString":{"name":"getQueryString","params":"","desc":"Generates the normalized query string for the Request."},"isSecure":{"name":"isSecure","params":"","desc":"Checks whether the request is secure or not."},"getHost":{"name":"getHost","params":"","desc":"Returns the host name."},"setMethod":{"name":"setMethod","params":"$method","desc":"Sets the request method."},"getMethod":{"name":"getMethod","params":"","desc":"Gets the request \"intended\" method."},"getRealMethod":{"name":"getRealMethod","params":"","desc":"Gets the \"real\" request method."},"getMimeType":{"name":"getMimeType","params":"$format","desc":"Gets the mime type associated with the format."},"getFormat":{"name":"getFormat","params":"$mimeType","desc":"Gets the format associated with the mime type."},"setFormat":{"name":"setFormat","params":"$format, $mimeTypes","desc":"Associates a format with mime types."},"getRequestFormat":{"name":"getRequestFormat","params":"$default = 'html'","desc":"Gets the request format."},"setRequestFormat":{"name":"setRequestFormat","params":"$format","desc":"Sets the request format."},"getContentType":{"name":"getContentType","params":"","desc":"Gets the format associated with the request."},"setDefaultLocale":{"name":"setDefaultLocale","params":"$locale","desc":"Sets the default locale."},"setLocale":{"name":"setLocale","params":"$locale","desc":"Sets the locale."},"getLocale":{"name":"getLocale","params":"","desc":"Get the locale."},"isMethod":{"name":"isMethod","params":"$method","desc":"Checks if the request method is of specified type."},"isMethodSafe":{"name":"isMethodSafe","params":"","desc":"Checks whether the method is safe or not."},"getContent":{"name":"getContent","params":"$asResource = false","desc":"Returns the request body content."},"getETags":{"name":"getETags","params":"","desc":"Gets the Etags."},"isNoCache":{"name":"isNoCache","params":"","desc":""},"getPreferredLanguage":{"name":"getPreferredLanguage","params":"$locales = null","desc":"Returns the preferred language."},"getLanguages":{"name":"getLanguages","params":"","desc":"Gets a list of languages acceptable by the client browser."},"getCharsets":{"name":"getCharsets","params":"","desc":"Gets a list of charsets acceptable by the client browser."},"getAcceptableContentTypes":{"name":"getAcceptableContentTypes","params":"","desc":"Gets a list of content types acceptable by the client browser"},"isXmlHttpRequest":{"name":"isXmlHttpRequest","params":"","desc":"Returns true if the request is a XMLHttpRequest."}}}},"Response":{"root":"Illuminate\\Support\\Facades\\Response","facade":"Illuminate\\Support\\Facades\\Response","methods":{"Illuminate\\Support\\Facades\\Response":{"make":{"name":"make","params":"$content = '', $status = 200, $headers = array()","desc":"Return a new response from the application."},"view":{"name":"view","params":"$view, $data = array(), $status = 200, $headers = array()","desc":"Return a new view response from the application."},"json":{"name":"json","params":"$data = array(), $status = 200, $headers = array()","desc":"Return a new JSON response from the application."},"stream":{"name":"stream","params":"$callback, $status = 200, $headers = array()","desc":"Return a new streamed response from the application."},"download":{"name":"download","params":"$file, $name = null, $headers = array()","desc":"Create a new file download response."},"macro":{"name":"macro","params":"$name, $callback","desc":"Register a macro with the Response class."}}}},"Route":{"root":"Illuminate\\Routing\\Router","facade":"Illuminate\\Support\\Facades\\Route","methods":{"Illuminate\\Routing\\Router":{"get":{"name":"get","params":"$pattern, $action","desc":"Add a new route to the collection."},"post":{"name":"post","params":"$pattern, $action","desc":"Add a new route to the collection."},"put":{"name":"put","params":"$pattern, $action","desc":"Add a new route to the collection."},"patch":{"name":"patch","params":"$pattern, $action","desc":"Add a new route to the collection."},"delete":{"name":"delete","params":"$pattern, $action","desc":"Add a new route to the collection."},"options":{"name":"options","params":"$pattern, $action","desc":"Add a new route to the collection."},"match":{"name":"match","params":"$method, $pattern, $action","desc":"Add a new route to the collection."},"any":{"name":"any","params":"$pattern, $action","desc":"Add a new route to the collection."},"controllers":{"name":"controllers","params":"$controllers","desc":"Register an array of controllers with wildcard routing."},"controller":{"name":"controller","params":"$uri, $controller, $names = array()","desc":"Route a controller to a URI with wildcard routing."},"resource":{"name":"resource","params":"$resource, $controller, $options = array()","desc":"Route a resource to a controller."},"getResourceUri":{"name":"getResourceUri","params":"$resource","desc":"Get the base resource URI for a given resource."},"getResourceWildcard":{"name":"getResourceWildcard","params":"$value","desc":"Format a resource wildcard parameter."},"group":{"name":"group","params":"$attributes, $callback","desc":"Create a route group with shared attributes."},"dispatch":{"name":"dispatch","params":"$request","desc":"Get the response for a given request."},"before":{"name":"before","params":"$callback","desc":"Register a \"before\" routing filter."},"after":{"name":"after","params":"$callback","desc":"Register an \"after\" routing filter."},"close":{"name":"close","params":"$callback","desc":"Register a \"close\" routing filter."},"finish":{"name":"finish","params":"$callback","desc":"Register a \"finish\" routing filters."},"filter":{"name":"filter","params":"$name, $callback","desc":"Register a new filter with the application."},"getFilter":{"name":"getFilter","params":"$name","desc":"Get a registered filter callback."},"when":{"name":"when","params":"$pattern, $names, $methods = null","desc":"Tie a registered filter to a URI pattern."},"findPatternFilters":{"name":"findPatternFilters","params":"$method, $path","desc":"Find the patterned filters matching a request."},"callFinishFilter":{"name":"callFinishFilter","params":"$request, $response","desc":"Call the finish\" global filter."},"callCloseFilter":{"name":"callCloseFilter","params":"$request, $response","desc":"Call the \"close\" global filter."},"pattern":{"name":"pattern","params":"$key, $pattern","desc":"Set a global where pattern on all routes"},"model":{"name":"model","params":"$key, $class, $callback = null","desc":"Register a model binder for a wildcard."},"bind":{"name":"bind","params":"$key, $binder","desc":"Register a custom parameter binder."},"hasBinder":{"name":"hasBinder","params":"$key","desc":"Determine if a given key has a registered binder."},"performBinding":{"name":"performBinding","params":"$key, $value, $route","desc":"Call a binder for a given wildcard."},"prepare":{"name":"prepare","params":"$value, $request","desc":"Prepare the given value as a Response object."},"currentRouteName":{"name":"currentRouteName","params":"","desc":"Get the current route name."},"currentRouteNamed":{"name":"currentRouteNamed","params":"$name","desc":"Determine if the current route has a given name."},"currentRouteAction":{"name":"currentRouteAction","params":"","desc":"Get the current route action."},"currentRouteUses":{"name":"currentRouteUses","params":"$action","desc":"Determine if the current route uses a given controller action."},"filtersEnabled":{"name":"filtersEnabled","params":"","desc":"Determine if route filters are enabled."},"enableFilters":{"name":"enableFilters","params":"","desc":"Enable the running of filters."},"disableFilters":{"name":"disableFilters","params":"","desc":"Disable the running of all filters."},"getRoutes":{"name":"getRoutes","params":"","desc":"Retrieve the entire route collection."},"getRequest":{"name":"getRequest","params":"","desc":"Get the current request being dispatched."},"getCurrentRoute":{"name":"getCurrentRoute","params":"","desc":"Get the current route being executed."},"setCurrentRoute":{"name":"setCurrentRoute","params":"$route","desc":"Set the current route on the router."},"getFilters":{"name":"getFilters","params":"","desc":"Get the filters defined on the router."},"getGlobalFilters":{"name":"getGlobalFilters","params":"","desc":"Get the global filters defined on the router."},"getInspector":{"name":"getInspector","params":"","desc":"Get the controller inspector instance."},"setInspector":{"name":"setInspector","params":"$inspector","desc":"Set the controller inspector instance."},"getContainer":{"name":"getContainer","params":"","desc":"Get the container used by the router."},"setContainer":{"name":"setContainer","params":"$container","desc":"Set the container instance on the router."}}}},"Schema":{"root":"Illuminate\\Database\\Schema\\Builder","facade":"Illuminate\\Support\\Facades\\Schema","methods":{"Illuminate\\Database\\Schema\\Builder":{"hasTable":{"name":"hasTable","params":"$table","desc":"Determine if the given table exists."},"hasColumn":{"name":"hasColumn","params":"$table, $column","desc":"Determine if the given table has a given column."},"table":{"name":"table","params":"$table, $callback","desc":"Modify a table on the schema."},"create":{"name":"create","params":"$table, $callback","desc":"Create a new table on the schema."},"drop":{"name":"drop","params":"$table","desc":"Drop a table from the schema."},"dropIfExists":{"name":"dropIfExists","params":"$table","desc":"Drop a table from the schema if it exists."},"rename":{"name":"rename","params":"$from, $to","desc":"Rename a table on the schema."},"getConnection":{"name":"getConnection","params":"","desc":"Get the database connection instance."},"setConnection":{"name":"setConnection","params":"$connection","desc":"Set the database connection instance."}}}},"Seeder":{"root":"Illuminate\\Database\\Seeder","facade":"Illuminate\\Database\\Seeder","methods":{"Illuminate\\Database\\Seeder":{"run":{"name":"run","params":"","desc":"Run the database seeds."},"call":{"name":"call","params":"$class","desc":"Seed the given connection from the given path."},"setContainer":{"name":"setContainer","params":"$container","desc":"Set the IoC container instance."},"setCommand":{"name":"setCommand","params":"$command","desc":"Set the console command instance."}}}},"Session":{"root":"Illuminate\\Session\\Store","facade":"Illuminate\\Support\\Facades\\Session","methods":{"Illuminate\\Support\\Manager":{"driver":{"name":"driver","params":"$driver = null","desc":"Get a driver instance."},"extend":{"name":"extend","params":"$driver, $callback","desc":"Register a custom driver creator Closure."},"getDrivers":{"name":"getDrivers","params":"","desc":"Get all of the created \"drivers\"."}},"Illuminate\\Session\\Store":{"start":{"name":"start","params":"","desc":"Starts the session storage."},"save":{"name":"save","params":"","desc":"Force the session to be saved and closed."},"has":{"name":"has","params":"$name","desc":"Checks if an attribute is defined."},"get":{"name":"get","params":"$name, $default = null","desc":"Returns an attribute."},"hasOldInput":{"name":"hasOldInput","params":"$key = null","desc":"Determine if the session contains old input."},"getOldInput":{"name":"getOldInput","params":"$key = null, $default = null","desc":"Get the requested item from the flashed input array."},"getToken":{"name":"getToken","params":"","desc":"Get the CSRF token value."},"token":{"name":"token","params":"","desc":"Get the CSRF token value."},"put":{"name":"put","params":"$key, $value","desc":"Put a key \/ value pair in the session."},"push":{"name":"push","params":"$key, $value","desc":"Push a value onto a session array."},"flash":{"name":"flash","params":"$key, $value","desc":"Flash a key \/ value pair to the session."},"flashInput":{"name":"flashInput","params":"$value","desc":"Flash an input array to the session."},"reflash":{"name":"reflash","params":"","desc":"Reflash all of the session flash data."},"keep":{"name":"keep","params":"$keys = null","desc":"Reflash a subset of the current flash data."},"forget":{"name":"forget","params":"$key","desc":"Remove an item from the session."},"flush":{"name":"flush","params":"","desc":"Remove all of the items from the session."},"regenerate":{"name":"regenerate","params":"","desc":"Generate a new session identifier."}},"Symfony\\Component\\HttpFoundation\\Session\\Session":{"set":{"name":"set","params":"$name, $value","desc":"Sets an attribute."},"all":{"name":"all","params":"","desc":"Returns attributes."},"replace":{"name":"replace","params":"$attributes","desc":"Sets attributes."},"remove":{"name":"remove","params":"$name","desc":"Removes an attribute."},"clear":{"name":"clear","params":"","desc":"Clears all attributes."},"isStarted":{"name":"isStarted","params":"","desc":"Checks if the session was started."},"getIterator":{"name":"getIterator","params":"","desc":"Returns an iterator for attributes."},"count":{"name":"count","params":"","desc":"Returns the number of attributes."},"invalidate":{"name":"invalidate","params":"$lifetime = null","desc":"Invalidates the current session."},"migrate":{"name":"migrate","params":"$destroy = false, $lifetime = null","desc":"Migrates the current session to a new session id while maintaining all\nsession attributes."},"getId":{"name":"getId","params":"","desc":"Returns the session ID."},"setId":{"name":"setId","params":"$id","desc":"Sets the session ID"},"getName":{"name":"getName","params":"","desc":"Returns the session name."},"setName":{"name":"setName","params":"$name","desc":"Sets the session name."},"getMetadataBag":{"name":"getMetadataBag","params":"","desc":"Gets session meta."},"registerBag":{"name":"registerBag","params":"$bag","desc":"Registers a SessionBagInterface with the session."},"getBag":{"name":"getBag","params":"$name","desc":"Gets a bag instance by name."},"getFlashBag":{"name":"getFlashBag","params":"","desc":"Gets the flashbag interface."}}}},"Str":{"root":"Illuminate\\Support\\Str","facade":"Illuminate\\Support\\Str","methods":{"Illuminate\\Support\\Str":{"ascii":{"name":"ascii","params":"$value","desc":"Transliterate a UTF-8 value to ASCII."},"camel":{"name":"camel","params":"$value","desc":"Convert a value to camel case."},"contains":{"name":"contains","params":"$haystack, $needle","desc":"Determine if a given string contains a given sub-string."},"endsWith":{"name":"endsWith","params":"$haystack, $needles","desc":"Determine if a given string ends with a given needle."},"finish":{"name":"finish","params":"$value, $cap","desc":"Cap a string with a single instance of a given value."},"is":{"name":"is","params":"$pattern, $value","desc":"Determine if a given string matches a given pattern."},"length":{"name":"length","params":"$value","desc":"Return the length of the given string."},"limit":{"name":"limit","params":"$value, $limit = 100, $end = '...'","desc":"Limit the number of characters in a string."},"lower":{"name":"lower","params":"$value","desc":"Convert the given string to lower-case."},"words":{"name":"words","params":"$value, $words = 100, $end = '...'","desc":"Limit the number of words in a string."},"parseCallback":{"name":"parseCallback","params":"$callback, $default","desc":"Parse a Class@method style callback into class and method."},"plural":{"name":"plural","params":"$value, $count = 2","desc":"Get the plural form of an English word."},"random":{"name":"random","params":"$length = 16","desc":"Generate a more truly \"random\" alpha-numeric string."},"quickRandom":{"name":"quickRandom","params":"$length = 16","desc":"Generate a \"random\" alpha-numeric string."},"upper":{"name":"upper","params":"$value","desc":"Convert the given string to upper-case."},"title":{"name":"title","params":"$value","desc":"Convert the given string to title case."},"singular":{"name":"singular","params":"$value","desc":"Get the singular form of an English word."},"slug":{"name":"slug","params":"$title, $separator = '-'","desc":"Generate a URL friendly \"slug\" from a given string."},"snake":{"name":"snake","params":"$value, $delimiter = '_'","desc":"Convert a string to snake case."},"startsWith":{"name":"startsWith","params":"$haystack, $needles","desc":"Determine if a string starts with a given needle."},"studly":{"name":"studly","params":"$value","desc":"Convert a value to studly caps case."},"macro":{"name":"macro","params":"$name, $macro","desc":"Register a custom string macro."}}}},"URL":{"root":"Illuminate\\Routing\\UrlGenerator","facade":"Illuminate\\Support\\Facades\\URL","methods":{"Illuminate\\Routing\\UrlGenerator":{"full":{"name":"full","params":"","desc":"Get the full URL for the current request."},"current":{"name":"current","params":"","desc":"Get the current URL for the request."},"previous":{"name":"previous","params":"","desc":"Get the URL for the previous request."},"to":{"name":"to","params":"$path, $parameters = array(), $secure = null","desc":"Generate a absolute URL to the given path."},"secure":{"name":"secure","params":"$path, $parameters = array()","desc":"Generate a secure, absolute URL to the given path."},"asset":{"name":"asset","params":"$path, $secure = null","desc":"Generate a URL to an application asset."},"secureAsset":{"name":"secureAsset","params":"$path","desc":"Generate a URL to a secure asset."},"route":{"name":"route","params":"$name, $parameters = array(), $absolute = true","desc":"Get the URL to a named route."},"action":{"name":"action","params":"$action, $parameters = array(), $absolute = true","desc":"Get the URL to a controller action."},"isValidUrl":{"name":"isValidUrl","params":"$path","desc":"Determine if the given path is a valid URL."},"getRequest":{"name":"getRequest","params":"","desc":"Get the request instance."},"setRequest":{"name":"setRequest","params":"$request","desc":"Set the current request instance."},"getGenerator":{"name":"getGenerator","params":"","desc":"Get the Symfony URL generator instance."},"setGenerator":{"name":"setGenerator","params":"$generator","desc":"Set the Symfony URL generator instance."}}}},"Validator":{"root":"Illuminate\\Validation\\Factory","facade":"Illuminate\\Support\\Facades\\Validator","methods":{"Illuminate\\Validation\\Factory":{"make":{"name":"make","params":"$data, $rules, $messages = array()","desc":"Create a new Validator instance."},"extend":{"name":"extend","params":"$rule, $extension, $message = null","desc":"Register a custom validator extension."},"extendImplicit":{"name":"extendImplicit","params":"$rule, $extension, $message = null","desc":"Register a custom implicit validator extension."},"resolver":{"name":"resolver","params":"$resolver","desc":"Set the Validator instance resolver."},"getTranslator":{"name":"getTranslator","params":"","desc":"Get the Translator implementation."},"getPresenceVerifier":{"name":"getPresenceVerifier","params":"","desc":"Get the Presence Verifier implementation."},"setPresenceVerifier":{"name":"setPresenceVerifier","params":"$presenceVerifier","desc":"Set the Presence Verifier implementation."}}}},"View":{"root":"Illuminate\\View\\Environment","facade":"Illuminate\\Support\\Facades\\View","methods":{"Illuminate\\View\\Environment":{"make":{"name":"make","params":"$view, $data = array(), $mergeData = array()","desc":"Get a evaluated view contents for the given view."},"of":{"name":"of","params":"$view, $data = array()","desc":"Get a evaluated view contents for a named view."},"name":{"name":"name","params":"$view, $name","desc":"Register a named view."},"exists":{"name":"exists","params":"$view","desc":"Determine if a given view exists."},"renderEach":{"name":"renderEach","params":"$view, $data, $iterator, $empty = 'raw|'","desc":"Get the rendered contents of a partial from a loop."},"share":{"name":"share","params":"$key, $value = null","desc":"Add a piece of shared data to the environment."},"creator":{"name":"creator","params":"$views, $callback","desc":"Register a view creator event."},"composer":{"name":"composer","params":"$views, $callback","desc":"Register a view composer event."},"callComposer":{"name":"callComposer","params":"$view","desc":"Call the composer for a given view."},"callCreator":{"name":"callCreator","params":"$view","desc":"Call the creator for a given view."},"startSection":{"name":"startSection","params":"$section, $content = ''","desc":"Start injecting content into a section."},"inject":{"name":"inject","params":"$section, $content","desc":"Inject inline content into a section."},"yieldSection":{"name":"yieldSection","params":"","desc":"Stop injecting content into a section and return its contents."},"stopSection":{"name":"stopSection","params":"$overwrite = false","desc":"Stop injecting content into a section."},"yieldContent":{"name":"yieldContent","params":"$section, $default = ''","desc":"Get the string contents of a section."},"flushSections":{"name":"flushSections","params":"","desc":"Flush all of the section contents."},"incrementRender":{"name":"incrementRender","params":"","desc":"Increment the rendering counter."},"decrementRender":{"name":"decrementRender","params":"","desc":"Decrement the rendering counter."},"doneRendering":{"name":"doneRendering","params":"","desc":"Check if there are no active render operations."},"addLocation":{"name":"addLocation","params":"$location","desc":"Add a location to the array of view locations."},"addNamespace":{"name":"addNamespace","params":"$namespace, $hints","desc":"Add a new namespace to the loader."},"addExtension":{"name":"addExtension","params":"$extension, $engine, $resolver = null","desc":"Register a valid view extension and its engine."},"getExtensions":{"name":"getExtensions","params":"","desc":"Get the extension to engine bindings."},"getEngineResolver":{"name":"getEngineResolver","params":"","desc":"Get the engine resolver instance."},"getFinder":{"name":"getFinder","params":"","desc":"Get the view finder instance."},"getDispatcher":{"name":"getDispatcher","params":"","desc":"Get the event dispatcher instance."},"setDispatcher":{"name":"setDispatcher","params":"$events","desc":"Set the event dispatcher instance."},"getContainer":{"name":"getContainer","params":"","desc":"Get the IoC container instance."},"setContainer":{"name":"setContainer","params":"$container","desc":"Set the IoC container instance."},"shared":{"name":"shared","params":"$key, $default = null","desc":"Get an item from the shared data."},"getShared":{"name":"getShared","params":"","desc":"Get all of the shared data for the environment."},"getSections":{"name":"getSections","params":"","desc":"Get the entire array of sections."},"getNames":{"name":"getNames","params":"","desc":"Get all of the registered named views in environment."}}}},"_helpers":{"action":{"name":"action","params":"$name, $parameters = array(), $absolute = true","desc":"Generate a URL to a controller action."},"app":{"name":"app","params":"$make = null","desc":"Get the root Facade application instance."},"app_path":{"name":"app_path","params":"$path = ''","desc":"Get the path to the application folder."},"array_add":{"name":"array_add","params":"$array, $key, $value","desc":"Add an element to an array if it doesn't exist."},"array_build":{"name":"array_build","params":"$array, $callback","desc":"Build a new array using a callback."},"array_divide":{"name":"array_divide","params":"$array","desc":"Divide an array into two arrays. One with keys and the other with values."},"array_dot":{"name":"array_dot","params":"$array, $prepend = ''","desc":"Flatten a multi-dimensional associative array with dots."},"array_except":{"name":"array_except","params":"$array, $keys","desc":"Get all of the given array except for a specified array of items."},"array_fetch":{"name":"array_fetch","params":"$array, $key","desc":"Fetch a flattened array of a nested array element."},"array_first":{"name":"array_first","params":"$array, $callback, $default = null","desc":"Return the first element in an array passing a given truth test."},"array_flatten":{"name":"array_flatten","params":"$array","desc":"Flatten a multi-dimensional array into a single level."},"array_forget":{"name":"array_forget","params":"$array, $key","desc":"Remove an array item from a given array using \"dot\" notation."},"array_get":{"name":"array_get","params":"$array, $key, $default = null","desc":"Get an item from an array using \"dot\" notation."},"array_only":{"name":"array_only","params":"$array, $keys","desc":"Get a subset of the items from the given array."},"array_pluck":{"name":"array_pluck","params":"$array, $value, $key = null","desc":"Pluck an array of values from an array."},"array_pull":{"name":"array_pull","params":"$array, $key","desc":"Get a value from the array, and remove it."},"array_set":{"name":"array_set","params":"$array, $key, $value","desc":"Set an array item to a given value using \"dot\" notation."},"array_sort":{"name":"array_sort","params":"$array, $callback","desc":"Sort the array using the given Closure."},"asset":{"name":"asset","params":"$path, $secure = null","desc":"Generate an asset path for the application."},"base_path":{"name":"base_path","params":"$path = ''","desc":"Get the path to the base of the install."},"camel_case":{"name":"camel_case","params":"$value","desc":"Convert a value to camel case."},"class_basename":{"name":"class_basename","params":"$class","desc":"Get the class \"basename\" of the given object \/ class."},"csrf_token":{"name":"csrf_token","params":"","desc":"Get the CSRF token value."},"dd":{"name":"dd","params":"","desc":"Dump the passed variables and end the script."},"e":{"name":"e","params":"$value","desc":"Escape HTML entities in a string."},"ends_with":{"name":"ends_with","params":"$haystack, $needle","desc":"Determine if a given string ends with a given needle."},"head":{"name":"head","params":"$array","desc":"Get the first element of an array. Useful for method chaining."},"link_to":{"name":"link_to","params":"$url, $title = null, $attributes = array(), $secure = null","desc":"Generate a HTML link."},"last":{"name":"last","params":"$array","desc":"Get the last element from an array."},"link_to_asset":{"name":"link_to_asset","params":"$url, $title = null, $attributes = array(), $secure = null","desc":"Generate a HTML link to an asset."},"link_to_route":{"name":"link_to_route","params":"$name, $title = null, $parameters = array(), $attributes = array()","desc":"Generate a HTML link to a named route."},"link_to_action":{"name":"link_to_action","params":"$action, $title = null, $parameters = array(), $attributes = array()","desc":"Generate a HTML link to a controller action."},"object_get":{"name":"object_get","params":"$object, $key, $default = null","desc":"Get an item from an object using \"dot\" notation."},"preg_replace_sub":{"name":"preg_replace_sub","params":"$pattern, $replacements, $subject","desc":"Replace a given pattern with each value in the array in sequentially."},"public_path":{"name":"public_path","params":"$path = ''","desc":"Get the path to the public folder."},"route":{"name":"route","params":"$route, $parameters = array(), $absolute = true","desc":"Generate a URL to a named route."},"secure_asset":{"name":"secure_asset","params":"$path","desc":"Generate an asset path for the application."},"secure_url":{"name":"secure_url","params":"$path, $parameters = array()","desc":"Generate a HTTPS url for the application."},"snake_case":{"name":"snake_case","params":"$value, $delimiter = '_'","desc":"Convert a string to snake case."},"starts_with":{"name":"starts_with","params":"$haystack, $needle","desc":"Determine if a string starts with a given needle."},"storage_path":{"name":"storage_path","params":"$path = ''","desc":"Get the path to the storage folder."},"str_contains":{"name":"str_contains","params":"$haystack, $needle","desc":"Determine if a given string contains a given sub-string."},"str_finish":{"name":"str_finish","params":"$value, $cap","desc":"Cap a string with a single instance of a given value."},"str_is":{"name":"str_is","params":"$pattern, $value","desc":"Determine if a given string matches a given pattern."},"str_plural":{"name":"str_plural","params":"$value, $count = 2","desc":"Get the plural form of an English word."},"str_random":{"name":"str_random","params":"$length = 16","desc":"Generate a \"random\" alpha-numeric string."},"str_singular":{"name":"str_singular","params":"$value","desc":"Get the singular form of an English word."},"studly_case":{"name":"studly_case","params":"$value","desc":"Convert a value to studly caps case."},"trans":{"name":"trans","params":"$id, $parameters = array(), $domain = 'messages', $locale = null","desc":"Translate the given message."},"trans_choice":{"name":"trans_choice","params":"$id, $number, $parameters = array(), $domain = 'messages', $locale = null","desc":"Translates the given message based on a count."},"url":{"name":"url","params":"$path = null, $parameters = array(), $secure = null","desc":"Generate a url for the application."},"value":{"name":"value","params":"$value","desc":"Return the default value of the given value."},"with":{"name":"with","params":"$object","desc":"Return the given object. Useful for chaining."}}}